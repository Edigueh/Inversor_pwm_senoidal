
inversor_Afa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005614  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080057e0  080057e0  000157e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d0  080059d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059d8  080059d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  2000000c  080059ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  080059ec  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba06  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c26  00000000  00000000  0002ba42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002d668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229fa  00000000  00000000  0002ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d74a  00000000  00000000  0005165a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da6a3  00000000  00000000  0005eda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139447  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003378  00000000  00000000  00139498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080057c4 	.word	0x080057c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080057c4 	.word	0x080057c4

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__gedf2>:
 80007d4:	f04f 3cff 	mov.w	ip, #4294967295
 80007d8:	e006      	b.n	80007e8 <__cmpdf2+0x4>
 80007da:	bf00      	nop

080007dc <__ledf2>:
 80007dc:	f04f 0c01 	mov.w	ip, #1
 80007e0:	e002      	b.n	80007e8 <__cmpdf2+0x4>
 80007e2:	bf00      	nop

080007e4 <__cmpdf2>:
 80007e4:	f04f 0c01 	mov.w	ip, #1
 80007e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007fe:	d01b      	beq.n	8000838 <__cmpdf2+0x54>
 8000800:	b001      	add	sp, #4
 8000802:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000806:	bf0c      	ite	eq
 8000808:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800080c:	ea91 0f03 	teqne	r1, r3
 8000810:	bf02      	ittt	eq
 8000812:	ea90 0f02 	teqeq	r0, r2
 8000816:	2000      	moveq	r0, #0
 8000818:	4770      	bxeq	lr
 800081a:	f110 0f00 	cmn.w	r0, #0
 800081e:	ea91 0f03 	teq	r1, r3
 8000822:	bf58      	it	pl
 8000824:	4299      	cmppl	r1, r3
 8000826:	bf08      	it	eq
 8000828:	4290      	cmpeq	r0, r2
 800082a:	bf2c      	ite	cs
 800082c:	17d8      	asrcs	r0, r3, #31
 800082e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000832:	f040 0001 	orr.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800083c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000840:	d102      	bne.n	8000848 <__cmpdf2+0x64>
 8000842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000846:	d107      	bne.n	8000858 <__cmpdf2+0x74>
 8000848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d1d6      	bne.n	8000800 <__cmpdf2+0x1c>
 8000852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000856:	d0d3      	beq.n	8000800 <__cmpdf2+0x1c>
 8000858:	f85d 0b04 	ldr.w	r0, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <__aeabi_cdrcmple>:
 8000860:	4684      	mov	ip, r0
 8000862:	4610      	mov	r0, r2
 8000864:	4662      	mov	r2, ip
 8000866:	468c      	mov	ip, r1
 8000868:	4619      	mov	r1, r3
 800086a:	4663      	mov	r3, ip
 800086c:	e000      	b.n	8000870 <__aeabi_cdcmpeq>
 800086e:	bf00      	nop

08000870 <__aeabi_cdcmpeq>:
 8000870:	b501      	push	{r0, lr}
 8000872:	f7ff ffb7 	bl	80007e4 <__cmpdf2>
 8000876:	2800      	cmp	r0, #0
 8000878:	bf48      	it	mi
 800087a:	f110 0f00 	cmnmi.w	r0, #0
 800087e:	bd01      	pop	{r0, pc}

08000880 <__aeabi_dcmpeq>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff fff4 	bl	8000870 <__aeabi_cdcmpeq>
 8000888:	bf0c      	ite	eq
 800088a:	2001      	moveq	r0, #1
 800088c:	2000      	movne	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmplt>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffea 	bl	8000870 <__aeabi_cdcmpeq>
 800089c:	bf34      	ite	cc
 800089e:	2001      	movcc	r0, #1
 80008a0:	2000      	movcs	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmple>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffe0 	bl	8000870 <__aeabi_cdcmpeq>
 80008b0:	bf94      	ite	ls
 80008b2:	2001      	movls	r0, #1
 80008b4:	2000      	movhi	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmpge>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffce 	bl	8000860 <__aeabi_cdrcmple>
 80008c4:	bf94      	ite	ls
 80008c6:	2001      	movls	r0, #1
 80008c8:	2000      	movhi	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmpgt>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffc4 	bl	8000860 <__aeabi_cdrcmple>
 80008d8:	bf34      	ite	cc
 80008da:	2001      	movcc	r0, #1
 80008dc:	2000      	movcs	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_d2iz>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d215      	bcs.n	800091a <__aeabi_d2iz+0x36>
 80008ee:	d511      	bpl.n	8000914 <__aeabi_d2iz+0x30>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d912      	bls.n	8000920 <__aeabi_d2iz+0x3c>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	bf18      	it	ne
 8000910:	4240      	negne	r0, r0
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d105      	bne.n	800092c <__aeabi_d2iz+0x48>
 8000920:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000924:	bf08      	it	eq
 8000926:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__aeabi_d2uiz>:
 8000934:	004a      	lsls	r2, r1, #1
 8000936:	d211      	bcs.n	800095c <__aeabi_d2uiz+0x28>
 8000938:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800093c:	d211      	bcs.n	8000962 <__aeabi_d2uiz+0x2e>
 800093e:	d50d      	bpl.n	800095c <__aeabi_d2uiz+0x28>
 8000940:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000944:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000948:	d40e      	bmi.n	8000968 <__aeabi_d2uiz+0x34>
 800094a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000952:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000956:	fa23 f002 	lsr.w	r0, r3, r2
 800095a:	4770      	bx	lr
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	4770      	bx	lr
 8000962:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000966:	d102      	bne.n	800096e <__aeabi_d2uiz+0x3a>
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	4770      	bx	lr
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	4770      	bx	lr

08000974 <__aeabi_uldivmod>:
 8000974:	b953      	cbnz	r3, 800098c <__aeabi_uldivmod+0x18>
 8000976:	b94a      	cbnz	r2, 800098c <__aeabi_uldivmod+0x18>
 8000978:	2900      	cmp	r1, #0
 800097a:	bf08      	it	eq
 800097c:	2800      	cmpeq	r0, #0
 800097e:	bf1c      	itt	ne
 8000980:	f04f 31ff 	movne.w	r1, #4294967295
 8000984:	f04f 30ff 	movne.w	r0, #4294967295
 8000988:	f000 b974 	b.w	8000c74 <__aeabi_idiv0>
 800098c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000994:	f000 f806 	bl	80009a4 <__udivmoddi4>
 8000998:	f8dd e004 	ldr.w	lr, [sp, #4]
 800099c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a0:	b004      	add	sp, #16
 80009a2:	4770      	bx	lr

080009a4 <__udivmoddi4>:
 80009a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a8:	9d08      	ldr	r5, [sp, #32]
 80009aa:	4604      	mov	r4, r0
 80009ac:	468e      	mov	lr, r1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d14d      	bne.n	8000a4e <__udivmoddi4+0xaa>
 80009b2:	428a      	cmp	r2, r1
 80009b4:	4694      	mov	ip, r2
 80009b6:	d969      	bls.n	8000a8c <__udivmoddi4+0xe8>
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	b152      	cbz	r2, 80009d4 <__udivmoddi4+0x30>
 80009be:	fa01 f302 	lsl.w	r3, r1, r2
 80009c2:	f1c2 0120 	rsb	r1, r2, #32
 80009c6:	fa20 f101 	lsr.w	r1, r0, r1
 80009ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ce:	ea41 0e03 	orr.w	lr, r1, r3
 80009d2:	4094      	lsls	r4, r2
 80009d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d8:	0c21      	lsrs	r1, r4, #16
 80009da:	fbbe f6f8 	udiv	r6, lr, r8
 80009de:	fa1f f78c 	uxth.w	r7, ip
 80009e2:	fb08 e316 	mls	r3, r8, r6, lr
 80009e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ea:	fb06 f107 	mul.w	r1, r6, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x64>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009fa:	f080 811f 	bcs.w	8000c3c <__udivmoddi4+0x298>
 80009fe:	4299      	cmp	r1, r3
 8000a00:	f240 811c 	bls.w	8000c3c <__udivmoddi4+0x298>
 8000a04:	3e02      	subs	r6, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a10:	fb08 3310 	mls	r3, r8, r0, r3
 8000a14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a18:	fb00 f707 	mul.w	r7, r0, r7
 8000a1c:	42a7      	cmp	r7, r4
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x92>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a28:	f080 810a 	bcs.w	8000c40 <__udivmoddi4+0x29c>
 8000a2c:	42a7      	cmp	r7, r4
 8000a2e:	f240 8107 	bls.w	8000c40 <__udivmoddi4+0x29c>
 8000a32:	4464      	add	r4, ip
 8000a34:	3802      	subs	r0, #2
 8000a36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a3a:	1be4      	subs	r4, r4, r7
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	b11d      	cbz	r5, 8000a48 <__udivmoddi4+0xa4>
 8000a40:	40d4      	lsrs	r4, r2
 8000a42:	2300      	movs	r3, #0
 8000a44:	e9c5 4300 	strd	r4, r3, [r5]
 8000a48:	4631      	mov	r1, r6
 8000a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d909      	bls.n	8000a66 <__udivmoddi4+0xc2>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	f000 80ef 	beq.w	8000c36 <__udivmoddi4+0x292>
 8000a58:	2600      	movs	r6, #0
 8000a5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a5e:	4630      	mov	r0, r6
 8000a60:	4631      	mov	r1, r6
 8000a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a66:	fab3 f683 	clz	r6, r3
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d14a      	bne.n	8000b04 <__udivmoddi4+0x160>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d302      	bcc.n	8000a78 <__udivmoddi4+0xd4>
 8000a72:	4282      	cmp	r2, r0
 8000a74:	f200 80f9 	bhi.w	8000c6a <__udivmoddi4+0x2c6>
 8000a78:	1a84      	subs	r4, r0, r2
 8000a7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a7e:	2001      	movs	r0, #1
 8000a80:	469e      	mov	lr, r3
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d0e0      	beq.n	8000a48 <__udivmoddi4+0xa4>
 8000a86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a8a:	e7dd      	b.n	8000a48 <__udivmoddi4+0xa4>
 8000a8c:	b902      	cbnz	r2, 8000a90 <__udivmoddi4+0xec>
 8000a8e:	deff      	udf	#255	; 0xff
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	f040 8092 	bne.w	8000bbe <__udivmoddi4+0x21a>
 8000a9a:	eba1 010c 	sub.w	r1, r1, ip
 8000a9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa2:	fa1f fe8c 	uxth.w	lr, ip
 8000aa6:	2601      	movs	r6, #1
 8000aa8:	0c20      	lsrs	r0, r4, #16
 8000aaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aae:	fb07 1113 	mls	r1, r7, r3, r1
 8000ab2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab6:	fb0e f003 	mul.w	r0, lr, r3
 8000aba:	4288      	cmp	r0, r1
 8000abc:	d908      	bls.n	8000ad0 <__udivmoddi4+0x12c>
 8000abe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x12a>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f200 80cb 	bhi.w	8000c64 <__udivmoddi4+0x2c0>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	1a09      	subs	r1, r1, r0
 8000ad2:	b2a4      	uxth	r4, r4
 8000ad4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad8:	fb07 1110 	mls	r1, r7, r0, r1
 8000adc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ae0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ae4:	45a6      	cmp	lr, r4
 8000ae6:	d908      	bls.n	8000afa <__udivmoddi4+0x156>
 8000ae8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000af0:	d202      	bcs.n	8000af8 <__udivmoddi4+0x154>
 8000af2:	45a6      	cmp	lr, r4
 8000af4:	f200 80bb 	bhi.w	8000c6e <__udivmoddi4+0x2ca>
 8000af8:	4608      	mov	r0, r1
 8000afa:	eba4 040e 	sub.w	r4, r4, lr
 8000afe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b02:	e79c      	b.n	8000a3e <__udivmoddi4+0x9a>
 8000b04:	f1c6 0720 	rsb	r7, r6, #32
 8000b08:	40b3      	lsls	r3, r6
 8000b0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b12:	fa20 f407 	lsr.w	r4, r0, r7
 8000b16:	fa01 f306 	lsl.w	r3, r1, r6
 8000b1a:	431c      	orrs	r4, r3
 8000b1c:	40f9      	lsrs	r1, r7
 8000b1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b22:	fa00 f306 	lsl.w	r3, r0, r6
 8000b26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b2a:	0c20      	lsrs	r0, r4, #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fb09 1118 	mls	r1, r9, r8, r1
 8000b34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b38:	fb08 f00e 	mul.w	r0, r8, lr
 8000b3c:	4288      	cmp	r0, r1
 8000b3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b42:	d90b      	bls.n	8000b5c <__udivmoddi4+0x1b8>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b4c:	f080 8088 	bcs.w	8000c60 <__udivmoddi4+0x2bc>
 8000b50:	4288      	cmp	r0, r1
 8000b52:	f240 8085 	bls.w	8000c60 <__udivmoddi4+0x2bc>
 8000b56:	f1a8 0802 	sub.w	r8, r8, #2
 8000b5a:	4461      	add	r1, ip
 8000b5c:	1a09      	subs	r1, r1, r0
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b64:	fb09 1110 	mls	r1, r9, r0, r1
 8000b68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b70:	458e      	cmp	lr, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x1e2>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b7c:	d26c      	bcs.n	8000c58 <__udivmoddi4+0x2b4>
 8000b7e:	458e      	cmp	lr, r1
 8000b80:	d96a      	bls.n	8000c58 <__udivmoddi4+0x2b4>
 8000b82:	3802      	subs	r0, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b8e:	eba1 010e 	sub.w	r1, r1, lr
 8000b92:	42a1      	cmp	r1, r4
 8000b94:	46c8      	mov	r8, r9
 8000b96:	46a6      	mov	lr, r4
 8000b98:	d356      	bcc.n	8000c48 <__udivmoddi4+0x2a4>
 8000b9a:	d053      	beq.n	8000c44 <__udivmoddi4+0x2a0>
 8000b9c:	b15d      	cbz	r5, 8000bb6 <__udivmoddi4+0x212>
 8000b9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000ba2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ba6:	fa01 f707 	lsl.w	r7, r1, r7
 8000baa:	fa22 f306 	lsr.w	r3, r2, r6
 8000bae:	40f1      	lsrs	r1, r6
 8000bb0:	431f      	orrs	r7, r3
 8000bb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bb6:	2600      	movs	r6, #0
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	f1c2 0320 	rsb	r3, r2, #32
 8000bc2:	40d8      	lsrs	r0, r3
 8000bc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	4301      	orrs	r1, r0
 8000bd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd4:	fa1f fe8c 	uxth.w	lr, ip
 8000bd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000be0:	0c0b      	lsrs	r3, r1, #16
 8000be2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000be6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bea:	429e      	cmp	r6, r3
 8000bec:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x260>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bfa:	d22f      	bcs.n	8000c5c <__udivmoddi4+0x2b8>
 8000bfc:	429e      	cmp	r6, r3
 8000bfe:	d92d      	bls.n	8000c5c <__udivmoddi4+0x2b8>
 8000c00:	3802      	subs	r0, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	b289      	uxth	r1, r1
 8000c08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c14:	fb06 f30e 	mul.w	r3, r6, lr
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x28a>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c24:	d216      	bcs.n	8000c54 <__udivmoddi4+0x2b0>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d914      	bls.n	8000c54 <__udivmoddi4+0x2b0>
 8000c2a:	3e02      	subs	r6, #2
 8000c2c:	4461      	add	r1, ip
 8000c2e:	1ac9      	subs	r1, r1, r3
 8000c30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c34:	e738      	b.n	8000aa8 <__udivmoddi4+0x104>
 8000c36:	462e      	mov	r6, r5
 8000c38:	4628      	mov	r0, r5
 8000c3a:	e705      	b.n	8000a48 <__udivmoddi4+0xa4>
 8000c3c:	4606      	mov	r6, r0
 8000c3e:	e6e3      	b.n	8000a08 <__udivmoddi4+0x64>
 8000c40:	4618      	mov	r0, r3
 8000c42:	e6f8      	b.n	8000a36 <__udivmoddi4+0x92>
 8000c44:	454b      	cmp	r3, r9
 8000c46:	d2a9      	bcs.n	8000b9c <__udivmoddi4+0x1f8>
 8000c48:	ebb9 0802 	subs.w	r8, r9, r2
 8000c4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c50:	3801      	subs	r0, #1
 8000c52:	e7a3      	b.n	8000b9c <__udivmoddi4+0x1f8>
 8000c54:	4646      	mov	r6, r8
 8000c56:	e7ea      	b.n	8000c2e <__udivmoddi4+0x28a>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	e794      	b.n	8000b86 <__udivmoddi4+0x1e2>
 8000c5c:	4640      	mov	r0, r8
 8000c5e:	e7d1      	b.n	8000c04 <__udivmoddi4+0x260>
 8000c60:	46d0      	mov	r8, sl
 8000c62:	e77b      	b.n	8000b5c <__udivmoddi4+0x1b8>
 8000c64:	3b02      	subs	r3, #2
 8000c66:	4461      	add	r1, ip
 8000c68:	e732      	b.n	8000ad0 <__udivmoddi4+0x12c>
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	e709      	b.n	8000a82 <__udivmoddi4+0xde>
 8000c6e:	4464      	add	r4, ip
 8000c70:	3802      	subs	r0, #2
 8000c72:	e742      	b.n	8000afa <__udivmoddi4+0x156>

08000c74 <__aeabi_idiv0>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b598      	push	{r3, r4, r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f000 fcf6 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f926 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f000 fa92 	bl	80011ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c88:	f000 fa68 	bl	800115c <MX_DMA_Init>
  MX_TIM3_Init();
 8000c8c:	f000 f9e2 	bl	8001054 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000c90:	f000 f98c 	bl	8000fac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //Botão para dar Toggle no Relé

  for(i=0;i<POSICOES;i++) //Populatin the Array
 8000c94:	4b82      	ldr	r3, [pc, #520]	; (8000ea0 <main+0x228>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e0b7      	b.n	8000e0c <main+0x194>
  {
	  seno[i] = (((sin(i*(DOUBLEPI/POSICOES)))+1)*(((280+1)/2)));
 8000c9c:	4b80      	ldr	r3, [pc, #512]	; (8000ea0 <main+0x228>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd2d 	bl	8000700 <__aeabi_i2d>
 8000ca6:	a37c      	add	r3, pc, #496	; (adr r3, 8000e98 <main+0x220>)
 8000ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cac:	f7ff faac 	bl	8000208 <__aeabi_dmul>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	ec43 2b17 	vmov	d7, r2, r3
 8000cb8:	eeb0 0a47 	vmov.f32	s0, s14
 8000cbc:	eef0 0a67 	vmov.f32	s1, s15
 8000cc0:	f003 fd36 	bl	8004730 <sin>
 8000cc4:	ec51 0b10 	vmov	r0, r1, d0
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	4b75      	ldr	r3, [pc, #468]	; (8000ea4 <main+0x22c>)
 8000cce:	f7ff fbcb 	bl	8000468 <__adddf3>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	4b72      	ldr	r3, [pc, #456]	; (8000ea8 <main+0x230>)
 8000ce0:	f7ff fa92 	bl	8000208 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	496d      	ldr	r1, [pc, #436]	; (8000ea0 <main+0x228>)
 8000cea:	7809      	ldrb	r1, [r1, #0]
 8000cec:	460c      	mov	r4, r1
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f7ff fe1f 	bl	8000934 <__aeabi_d2uiz>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	4b6c      	ldr	r3, [pc, #432]	; (8000eac <main+0x234>)
 8000cfc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	  seno_inv[i] = (((sin(i*(DOUBLEPI/POSICOES)))+1)*(((280+1)/2)));
 8000d00:	4b67      	ldr	r3, [pc, #412]	; (8000ea0 <main+0x228>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fcfb 	bl	8000700 <__aeabi_i2d>
 8000d0a:	a363      	add	r3, pc, #396	; (adr r3, 8000e98 <main+0x220>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	f7ff fa7a 	bl	8000208 <__aeabi_dmul>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	ec43 2b17 	vmov	d7, r2, r3
 8000d1c:	eeb0 0a47 	vmov.f32	s0, s14
 8000d20:	eef0 0a67 	vmov.f32	s1, s15
 8000d24:	f003 fd04 	bl	8004730 <sin>
 8000d28:	ec51 0b10 	vmov	r0, r1, d0
 8000d2c:	f04f 0200 	mov.w	r2, #0
 8000d30:	4b5c      	ldr	r3, [pc, #368]	; (8000ea4 <main+0x22c>)
 8000d32:	f7ff fb99 	bl	8000468 <__adddf3>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <main+0x230>)
 8000d44:	f7ff fa60 	bl	8000208 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4954      	ldr	r1, [pc, #336]	; (8000ea0 <main+0x228>)
 8000d4e:	7809      	ldrb	r1, [r1, #0]
 8000d50:	460c      	mov	r4, r1
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	f7ff fded 	bl	8000934 <__aeabi_d2uiz>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b54      	ldr	r3, [pc, #336]	; (8000eb0 <main+0x238>)
 8000d60:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	  //Preenchimento dos Arrays com os valores senoidais de tensão média no PWM


		  if (seno[i]>=140)
 8000d64:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <main+0x228>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b50      	ldr	r3, [pc, #320]	; (8000eac <main+0x234>)
 8000d6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d70:	2b8b      	cmp	r3, #139	; 0x8b
 8000d72:	d908      	bls.n	8000d86 <main+0x10e>
		  {
			 seno_inv[i] = 279;
 8000d74:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <main+0x228>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <main+0x238>)
 8000d7c:	f240 1117 	movw	r1, #279	; 0x117
 8000d80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000d84:	e00e      	b.n	8000da4 <main+0x12c>
		  }
		  else if (seno[i]<=140)
 8000d86:	4b46      	ldr	r3, [pc, #280]	; (8000ea0 <main+0x228>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b47      	ldr	r3, [pc, #284]	; (8000eac <main+0x234>)
 8000d8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d92:	2b8c      	cmp	r3, #140	; 0x8c
 8000d94:	d806      	bhi.n	8000da4 <main+0x12c>
		  {
			  seno[i] = 0;
 8000d96:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <main+0x228>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b43      	ldr	r3, [pc, #268]	; (8000eac <main+0x234>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  }
		  //Geração do desligamento no semiciclo negativo

		  if(i>=126 && i<=128)
 8000da4:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <main+0x228>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b7d      	cmp	r3, #125	; 0x7d
 8000daa:	d912      	bls.n	8000dd2 <main+0x15a>
 8000dac:	4b3c      	ldr	r3, [pc, #240]	; (8000ea0 <main+0x228>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b80      	cmp	r3, #128	; 0x80
 8000db2:	d80e      	bhi.n	8000dd2 <main+0x15a>
		  {
			  seno[i] = 0;
 8000db4:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <main+0x228>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <main+0x234>)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  seno_inv[i] = 279;
 8000dc2:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <main+0x228>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <main+0x238>)
 8000dca:	f240 1117 	movw	r1, #279	; 0x117
 8000dce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  }
		  //Geração do Intervalo Inicial do Tempo morto

		  if(i>=245 && i<=249)
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <main+0x228>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2bf4      	cmp	r3, #244	; 0xf4
 8000dd8:	d912      	bls.n	8000e00 <main+0x188>
 8000dda:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <main+0x228>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2bf9      	cmp	r3, #249	; 0xf9
 8000de0:	d80e      	bhi.n	8000e00 <main+0x188>
		  {
			  seno[i] = 0;
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <main+0x228>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <main+0x234>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  seno_inv[i] = 279;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <main+0x228>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <main+0x238>)
 8000df8:	f240 1117 	movw	r1, #279	; 0x117
 8000dfc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<POSICOES;i++) //Populatin the Array
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <main+0x228>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <main+0x228>)
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <main+0x228>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2bf9      	cmp	r3, #249	; 0xf9
 8000e12:	f67f af43 	bls.w	8000c9c <main+0x24>
		  }
		  //Geração do Intervalo final do tempo morto

  }

  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, seno, POSICOES);
 8000e16:	23fa      	movs	r3, #250	; 0xfa
 8000e18:	4a24      	ldr	r2, [pc, #144]	; (8000eac <main+0x234>)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4825      	ldr	r0, [pc, #148]	; (8000eb4 <main+0x23c>)
 8000e1e:	f002 fc8d 	bl	800373c <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3, seno_inv, POSICOES);
 8000e22:	23fa      	movs	r3, #250	; 0xfa
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <main+0x238>)
 8000e26:	2108      	movs	r1, #8
 8000e28:	4822      	ldr	r0, [pc, #136]	; (8000eb4 <main+0x23c>)
 8000e2a:	f002 fc87 	bl	800373c <HAL_TIM_PWM_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start(&hadc1);
 8000e2e:	4822      	ldr	r0, [pc, #136]	; (8000eb8 <main+0x240>)
 8000e30:	f000 fcd2 	bl	80017d8 <HAL_ADC_Start>
	newArr = HAL_ADC_GetValue(&hadc1);
 8000e34:	4820      	ldr	r0, [pc, #128]	; (8000eb8 <main+0x240>)
 8000e36:	f000 fda1 	bl	800197c <HAL_ADC_GetValue>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <main+0x244>)
 8000e40:	601a      	str	r2, [r3, #0]
	if(newArr>=17 && newArr<=21)
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <main+0x244>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b10      	cmp	r3, #16
 8000e48:	dd08      	ble.n	8000e5c <main+0x1e4>
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <main+0x244>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b15      	cmp	r3, #21
 8000e50:	dc04      	bgt.n	8000e5c <main+0x1e4>
	{
	__HAL_TIM_SET_PRESCALER(&htim3, newArr);
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <main+0x244>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <main+0x23c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	botao = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e60:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <main+0x248>)
 8000e62:	f001 fddd 	bl	8002a20 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <main+0x24c>)
 8000e6c:	601a      	str	r2, [r3, #0]
	  if(botao == 0)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <main+0x24c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <main+0x208>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2102      	movs	r1, #2
 8000e7a:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <main+0x250>)
 8000e7c:	f001 fde8 	bl	8002a50 <HAL_GPIO_WritePin>
	  }

	  rele = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000e80:	2102      	movs	r1, #2
 8000e82:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <main+0x250>)
 8000e84:	f001 fdcc 	bl	8002a20 <HAL_GPIO_ReadPin>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <main+0x254>)
 8000e8e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start(&hadc1);
 8000e90:	e7cd      	b.n	8000e2e <main+0x1b6>
 8000e92:	bf00      	nop
 8000e94:	f3af 8000 	nop.w
 8000e98:	a9e6eeb7 	.word	0xa9e6eeb7
 8000e9c:	3f99b90e 	.word	0x3f99b90e
 8000ea0:	20000560 	.word	0x20000560
 8000ea4:	3ff00000 	.word	0x3ff00000
 8000ea8:	40618000 	.word	0x40618000
 8000eac:	20000178 	.word	0x20000178
 8000eb0:	2000036c 	.word	0x2000036c
 8000eb4:	20000070 	.word	0x20000070
 8000eb8:	20000028 	.word	0x20000028
 8000ebc:	20000564 	.word	0x20000564
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	20000568 	.word	0x20000568
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	2000056c 	.word	0x2000056c

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	; 0x50
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	2234      	movs	r2, #52	; 0x34
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 fc1c 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <SystemClock_Config+0xd4>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <SystemClock_Config+0xd4>)
 8000efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <SystemClock_Config+0xd4>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <SystemClock_Config+0xd8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <SystemClock_Config+0xd8>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <SystemClock_Config+0xd8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f44:	2310      	movs	r3, #16
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 f8a6 	bl	80030b0 <HAL_RCC_OscConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f6a:	f000 f9a9 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6e:	230f      	movs	r3, #15
 8000f70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f72:	2302      	movs	r3, #2
 8000f74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	2102      	movs	r1, #2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fd7a 	bl	8002a84 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f96:	f000 f993 	bl	80012c0 <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3750      	adds	r7, #80	; 0x50
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40007000 	.word	0x40007000

08000fac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fc0:	4a22      	ldr	r2, [pc, #136]	; (800104c <MX_ADC1_Init+0xa0>)
 8000fc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fce:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000fd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <MX_ADC1_Init+0xa4>)
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_ADC1_Init+0x9c>)
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_ADC1_Init+0x9c>)
 800100a:	2201      	movs	r2, #1
 800100c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <MX_ADC1_Init+0x9c>)
 8001010:	f000 fb9e 	bl	8001750 <HAL_ADC_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800101a:	f000 f951 	bl	80012c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_ADC1_Init+0x9c>)
 8001030:	f000 fcb2 	bl	8001998 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800103a:	f000 f941 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000028 	.word	0x20000028
 800104c:	40012000 	.word	0x40012000
 8001050:	0f000001 	.word	0x0f000001

08001054 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	; 0x38
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_TIM3_Init+0x100>)
 8001086:	4a34      	ldr	r2, [pc, #208]	; (8001158 <MX_TIM3_Init+0x104>)
 8001088:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <MX_TIM3_Init+0x100>)
 800108c:	2213      	movs	r2, #19
 800108e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <MX_TIM3_Init+0x100>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 280-1;
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <MX_TIM3_Init+0x100>)
 8001098:	f240 1217 	movw	r2, #279	; 0x117
 800109c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_TIM3_Init+0x100>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <MX_TIM3_Init+0x100>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010aa:	482a      	ldr	r0, [pc, #168]	; (8001154 <MX_TIM3_Init+0x100>)
 80010ac:	f002 fa9e 	bl	80035ec <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010b6:	f000 f903 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4823      	ldr	r0, [pc, #140]	; (8001154 <MX_TIM3_Init+0x100>)
 80010c8:	f002 fdc2 	bl	8003c50 <HAL_TIM_ConfigClockSource>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010d2:	f000 f8f5 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010d6:	481f      	ldr	r0, [pc, #124]	; (8001154 <MX_TIM3_Init+0x100>)
 80010d8:	f002 fad7 	bl	800368a <HAL_TIM_PWM_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010e2:	f000 f8ed 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4619      	mov	r1, r3
 80010f4:	4817      	ldr	r0, [pc, #92]	; (8001154 <MX_TIM3_Init+0x100>)
 80010f6:	f003 fa71 	bl	80045dc <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001100:	f000 f8de 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001104:	2360      	movs	r3, #96	; 0x60
 8001106:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_TIM3_Init+0x100>)
 800111c:	f002 fcd6 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001126:	f000 f8cb 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800112a:	2370      	movs	r3, #112	; 0x70
 800112c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2208      	movs	r2, #8
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM3_Init+0x100>)
 8001136:	f002 fcc9 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001140:	f000 f8be 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM3_Init+0x100>)
 8001146:	f000 f9bd 	bl	80014c4 <HAL_TIM_MspPostInit>

}
 800114a:	bf00      	nop
 800114c:	3738      	adds	r7, #56	; 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000070 	.word	0x20000070
 8001158:	40000400 	.word	0x40000400

0800115c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_DMA_Init+0x4c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <MX_DMA_Init+0x4c>)
 800116c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <MX_DMA_Init+0x4c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	200f      	movs	r0, #15
 8001184:	f000 ff11 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001188:	200f      	movs	r0, #15
 800118a:	f000 ff2a 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	202f      	movs	r0, #47	; 0x2f
 8001194:	f000 ff09 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001198:	202f      	movs	r0, #47	; 0x2f
 800119a:	f000 ff22 	bl	8001fe2 <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <MX_GPIO_Init+0x108>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a3a      	ldr	r2, [pc, #232]	; (80012b4 <MX_GPIO_Init+0x108>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <MX_GPIO_Init+0x108>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MX_GPIO_Init+0x108>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <MX_GPIO_Init+0x108>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <MX_GPIO_Init+0x108>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <MX_GPIO_Init+0x108>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <MX_GPIO_Init+0x108>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MX_GPIO_Init+0x108>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_GPIO_Init+0x108>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a25      	ldr	r2, [pc, #148]	; (80012b4 <MX_GPIO_Init+0x108>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_GPIO_Init+0x108>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2102      	movs	r1, #2
 8001236:	4820      	ldr	r0, [pc, #128]	; (80012b8 <MX_GPIO_Init+0x10c>)
 8001238:	f001 fc0a 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001246:	2301      	movs	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	481a      	ldr	r0, [pc, #104]	; (80012bc <MX_GPIO_Init+0x110>)
 8001252:	f001 fa51 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001256:	2302      	movs	r3, #2
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125e:	2302      	movs	r3, #2
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4812      	ldr	r0, [pc, #72]	; (80012b8 <MX_GPIO_Init+0x10c>)
 800126e:	f001 fa43 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001272:	230c      	movs	r3, #12
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001282:	2307      	movs	r3, #7
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	480a      	ldr	r0, [pc, #40]	; (80012b8 <MX_GPIO_Init+0x10c>)
 800128e:	f001 fa33 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001292:	2320      	movs	r3, #32
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_GPIO_Init+0x10c>)
 80012a6:	f001 fa27 	bl	80026f8 <HAL_GPIO_Init>

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020800 	.word	0x40020800

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <Error_Handler+0x8>
	...

080012cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <HAL_MspInit+0x4c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_MspInit+0x4c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800130a:	2007      	movs	r0, #7
 800130c:	f000 fe42 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_ADC_MspInit+0x7c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d127      	bne.n	800138e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_ADC_MspInit+0x80>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a15      	ldr	r2, [pc, #84]	; (800139c <HAL_ADC_MspInit+0x80>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_ADC_MspInit+0x80>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_ADC_MspInit+0x80>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_ADC_MspInit+0x80>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_ADC_MspInit+0x80>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_ADC_MspInit+0x84>)
 800138a:	f001 f9b5 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40012000 	.word	0x40012000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a3e      	ldr	r2, [pc, #248]	; (80014ac <HAL_TIM_Base_MspInit+0x108>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d175      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0xfe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <HAL_TIM_Base_MspInit+0x10c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a3c      	ldr	r2, [pc, #240]	; (80014b0 <HAL_TIM_Base_MspInit+0x10c>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <HAL_TIM_Base_MspInit+0x10c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 80013d4:	4a38      	ldr	r2, [pc, #224]	; (80014b8 <HAL_TIM_Base_MspInit+0x114>)
 80013d6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 80013da:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80013de:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e6:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 80013ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 80013f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013fa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 80013fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001402:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 8001406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800140a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001418:	4826      	ldr	r0, [pc, #152]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 800141a:	f000 fdfd 	bl	8002018 <HAL_DMA_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001424:	f7ff ff4c 	bl	80012c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
 800142e:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 8001438:	639a      	str	r2, [r3, #56]	; 0x38
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_TIM_Base_MspInit+0x110>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 8001442:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <HAL_TIM_Base_MspInit+0x11c>)
 8001444:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 8001448:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800144c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 800145c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001460:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 8001464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001468:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 800146c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001470:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 8001474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001478:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 8001488:	f000 fdc6 	bl	8002018 <HAL_DMA_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_TIM_Base_MspInit+0xf2>
    {
      Error_Handler();
 8001492:	f7ff ff15 	bl	80012c0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a08      	ldr	r2, [pc, #32]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_TIM_Base_MspInit+0x118>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	200000b8 	.word	0x200000b8
 80014b8:	40026070 	.word	0x40026070
 80014bc:	20000118 	.word	0x20000118
 80014c0:	400260b8 	.word	0x400260b8

080014c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <HAL_TIM_MspPostInit+0xa4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d13b      	bne.n	800155e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_TIM_MspPostInit+0xa8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_TIM_MspPostInit+0xa8>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_TIM_MspPostInit+0xa8>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_TIM_MspPostInit+0xa8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <HAL_TIM_MspPostInit+0xa8>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_TIM_MspPostInit+0xa8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = TIM15KHz_Pin;
 800151e:	2340      	movs	r3, #64	; 0x40
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800152e:	2302      	movs	r3, #2
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM15KHz_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <HAL_TIM_MspPostInit+0xac>)
 800153a:	f001 f8dd 	bl	80026f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800154e:	2302      	movs	r3, #2
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4806      	ldr	r0, [pc, #24]	; (8001574 <HAL_TIM_MspPostInit+0xb0>)
 800155a:	f001 f8cd 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40000400 	.word	0x40000400
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800157c:	e7fe      	b.n	800157c <NMI_Handler+0x4>

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f000 f8a4 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <DMA1_Stream4_IRQHandler+0x10>)
 80015d2:	f000 fe27 	bl	8002224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200000b8 	.word	0x200000b8

080015e0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <DMA1_Stream7_IRQHandler+0x10>)
 80015e6:	f000 fe1d 	bl	8002224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000118 	.word	0x20000118

080015f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161e:	490e      	ldr	r1, [pc, #56]	; (8001658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001634:	4c0b      	ldr	r4, [pc, #44]	; (8001664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001642:	f7ff ffd7 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f003 f845 	bl	80046d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fb15 	bl	8000c78 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800165c:	080059e0 	.word	0x080059e0
  ldr r2, =_sbss
 8001660:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001664:	20000574 	.word	0x20000574

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_Init+0x40>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_Init+0x40>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x40>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 fc7d 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fe14 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fc95 	bl	8001ffe <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 fc5d 	bl	8001faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000008 	.word	0x20000008
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	20000570 	.word	0x20000570

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000570 	.word	0x20000570

08001750 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e033      	b.n	80017ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fdd4 	bl	800131c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d118      	bne.n	80017c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001796:	f023 0302 	bic.w	r3, r3, #2
 800179a:	f043 0202 	orr.w	r2, r3, #2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fa2a 	bl	8001bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f023 0303 	bic.w	r3, r3, #3
 80017b6:	f043 0201 	orr.w	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
 80017be:	e001      	b.n	80017c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_Start+0x1a>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e0b2      	b.n	8001958 <HAL_ADC_Start+0x180>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b01      	cmp	r3, #1
 8001806:	d018      	beq.n	800183a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001818:	4b52      	ldr	r3, [pc, #328]	; (8001964 <HAL_ADC_Start+0x18c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_ADC_Start+0x190>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0c9a      	lsrs	r2, r3, #18
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800182c:	e002      	b.n	8001834 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3b01      	subs	r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f9      	bne.n	800182e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d17a      	bne.n	800193e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001872:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001886:	d106      	bne.n	8001896 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	f023 0206 	bic.w	r2, r3, #6
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	645a      	str	r2, [r3, #68]	; 0x44
 8001894:	e002      	b.n	800189c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_ADC_Start+0x194>)
 80018a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d12a      	bne.n	8001914 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a2b      	ldr	r2, [pc, #172]	; (8001970 <HAL_ADC_Start+0x198>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d015      	beq.n	80018f4 <HAL_ADC_Start+0x11c>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a29      	ldr	r2, [pc, #164]	; (8001974 <HAL_ADC_Start+0x19c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <HAL_ADC_Start+0x106>
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_ADC_Start+0x194>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00a      	beq.n	80018f4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a25      	ldr	r2, [pc, #148]	; (8001978 <HAL_ADC_Start+0x1a0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d136      	bne.n	8001956 <HAL_ADC_Start+0x17e>
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_ADC_Start+0x194>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d130      	bne.n	8001956 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d129      	bne.n	8001956 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	e020      	b.n	8001956 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <HAL_ADC_Start+0x198>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d11b      	bne.n	8001956 <HAL_ADC_Start+0x17e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d114      	bne.n	8001956 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	e00b      	b.n	8001956 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f043 0210 	orr.w	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	20000000 	.word	0x20000000
 8001968:	431bde83 	.word	0x431bde83
 800196c:	40012300 	.word	0x40012300
 8001970:	40012000 	.word	0x40012000
 8001974:	40012100 	.word	0x40012100
 8001978:	40012200 	.word	0x40012200

0800197c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1c>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e113      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x244>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	d925      	bls.n	8001a10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68d9      	ldr	r1, [r3, #12]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	3b1e      	subs	r3, #30
 80019da:	2207      	movs	r2, #7
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68d9      	ldr	r1, [r3, #12]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	4603      	mov	r3, r0
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4403      	add	r3, r0
 8001a02:	3b1e      	subs	r3, #30
 8001a04:	409a      	lsls	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	e022      	b.n	8001a56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	2207      	movs	r2, #7
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4403      	add	r3, r0
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d824      	bhi.n	8001aa8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b05      	subs	r3, #5
 8001a70:	221f      	movs	r2, #31
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b05      	subs	r3, #5
 8001a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa6:	e04c      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	d824      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b23      	subs	r3, #35	; 0x23
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	400a      	ands	r2, r1
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b23      	subs	r3, #35	; 0x23
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
 8001af8:	e023      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b41      	subs	r3, #65	; 0x41
 8001b0c:	221f      	movs	r2, #31
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	400a      	ands	r2, r1
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3b41      	subs	r3, #65	; 0x41
 8001b36:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_ADC_ConfigChannel+0x250>)
 8001b44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_ADC_ConfigChannel+0x254>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10f      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1d8>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b12      	cmp	r3, #18
 8001b56:	d10b      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_ADC_ConfigChannel+0x254>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12b      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <HAL_ADC_ConfigChannel+0x258>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d003      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x1f4>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b11      	cmp	r3, #17
 8001b8a:	d122      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_ADC_ConfigChannel+0x258>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d111      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_ADC_ConfigChannel+0x25c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_ADC_ConfigChannel+0x260>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	0c9a      	lsrs	r2, r3, #18
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bc4:	e002      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f9      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40012300 	.word	0x40012300
 8001bec:	40012000 	.word	0x40012000
 8001bf0:	10000012 	.word	0x10000012
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c04:	4b79      	ldr	r3, [pc, #484]	; (8001dec <ADC_Init+0x1f0>)
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	021a      	lsls	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6899      	ldr	r1, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <ADC_Init+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6899      	ldr	r1, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	e00f      	b.n	8001cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0202 	bic.w	r2, r2, #2
 8001d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7e1b      	ldrb	r3, [r3, #24]
 8001d14:	005a      	lsls	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	3b01      	subs	r3, #1
 8001d54:	035a      	lsls	r2, r3, #13
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e007      	b.n	8001d70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	051a      	lsls	r2, r3, #20
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6899      	ldr	r1, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db2:	025a      	lsls	r2, r3, #9
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	029a      	lsls	r2, r3, #10
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40012300 	.word	0x40012300
 8001df0:	0f000001 	.word	0x0f000001

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f7ff ff8e 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff29 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff3e 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff8e 	bl	8001ee8 <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5d 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff31 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa2 	bl	8001f50 <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff fb88 	bl	8001738 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e099      	b.n	8002168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002054:	e00f      	b.n	8002076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002056:	f7ff fb6f 	bl	8001738 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b05      	cmp	r3, #5
 8002062:	d908      	bls.n	8002076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e078      	b.n	8002168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e8      	bne.n	8002056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_DMA_Init+0x158>)
 8002090:	4013      	ands	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d107      	bne.n	80020e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	4313      	orrs	r3, r2
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f023 0307 	bic.w	r3, r3, #7
 80020f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	2b04      	cmp	r3, #4
 8002108:	d117      	bne.n	800213a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00e      	beq.n	800213a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fa6f 	bl	8002600 <DMA_CheckFifoParam>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002136:	2301      	movs	r3, #1
 8002138:	e016      	b.n	8002168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fa26 	bl	8002594 <DMA_CalcBaseAndBitshift>
 8002148:	4603      	mov	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	223f      	movs	r2, #63	; 0x3f
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	f010803f 	.word	0xf010803f

08002174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_DMA_Start_IT+0x26>
 8002196:	2302      	movs	r3, #2
 8002198:	e040      	b.n	800221c <HAL_DMA_Start_IT+0xa8>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d12f      	bne.n	800220e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f9b8 	bl	8002538 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	223f      	movs	r2, #63	; 0x3f
 80021ce:	409a      	lsls	r2, r3
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0216 	orr.w	r2, r2, #22
 80021e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0208 	orr.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e005      	b.n	800221a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002216:	2302      	movs	r3, #2
 8002218:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002230:	4b8e      	ldr	r3, [pc, #568]	; (800246c <HAL_DMA_IRQHandler+0x248>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a8e      	ldr	r2, [pc, #568]	; (8002470 <HAL_DMA_IRQHandler+0x24c>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a9b      	lsrs	r3, r3, #10
 800223c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	2208      	movs	r2, #8
 8002250:	409a      	lsls	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01a      	beq.n	8002290 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0204 	bic.w	r2, r2, #4
 8002276:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	2208      	movs	r2, #8
 800227e:	409a      	lsls	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	2201      	movs	r2, #1
 8002296:	409a      	lsls	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d012      	beq.n	80022c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	2201      	movs	r2, #1
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f043 0202 	orr.w	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	2204      	movs	r2, #4
 80022cc:	409a      	lsls	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d012      	beq.n	80022fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	2204      	movs	r2, #4
 80022ea:	409a      	lsls	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f043 0204 	orr.w	r2, r3, #4
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	2210      	movs	r2, #16
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d043      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d03c      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	2210      	movs	r2, #16
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d018      	beq.n	8002366 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d024      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
 8002352:	e01f      	b.n	8002394 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
 8002364:	e016      	b.n	8002394 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d107      	bne.n	8002384 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0208 	bic.w	r2, r2, #8
 8002382:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2220      	movs	r2, #32
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 808f 	beq.w	80024c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8087 	beq.w	80024c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	2220      	movs	r2, #32
 80023bc:	409a      	lsls	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d136      	bne.n	800243c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0216 	bic.w	r2, r2, #22
 80023dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <HAL_DMA_IRQHandler+0x1da>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0208 	bic.w	r2, r2, #8
 800240c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	223f      	movs	r2, #63	; 0x3f
 8002414:	409a      	lsls	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242e:	2b00      	cmp	r3, #0
 8002430:	d07e      	beq.n	8002530 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
        }
        return;
 800243a:	e079      	b.n	8002530 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01d      	beq.n	8002486 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	2b00      	cmp	r3, #0
 800245e:	d031      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
 8002468:	e02c      	b.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000
 8002470:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d023      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
 8002484:	e01e      	b.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10f      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0210 	bic.w	r2, r2, #16
 80024a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d032      	beq.n	8002532 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d022      	beq.n	800251e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2205      	movs	r2, #5
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	3301      	adds	r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d307      	bcc.n	800250c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f2      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x2cc>
 800250a:	e000      	b.n	800250e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800250c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
 800252e:	e000      	b.n	8002532 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002530:	bf00      	nop
    }
  }
}
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002554:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b40      	cmp	r3, #64	; 0x40
 8002564:	d108      	bne.n	8002578 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002576:	e007      	b.n	8002588 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3b10      	subs	r3, #16
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <DMA_CalcBaseAndBitshift+0x64>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <DMA_CalcBaseAndBitshift+0x68>)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d909      	bls.n	80025d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ca:	f023 0303 	bic.w	r3, r3, #3
 80025ce:	1d1a      	adds	r2, r3, #4
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	659a      	str	r2, [r3, #88]	; 0x58
 80025d4:	e007      	b.n	80025e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	aaaaaaab 	.word	0xaaaaaaab
 80025fc:	080057f0 	.word	0x080057f0

08002600 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11f      	bne.n	800265a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d856      	bhi.n	80026ce <DMA_CheckFifoParam+0xce>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <DMA_CheckFifoParam+0x28>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002639 	.word	0x08002639
 800262c:	0800264b 	.word	0x0800264b
 8002630:	08002639 	.word	0x08002639
 8002634:	080026cf 	.word	0x080026cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d046      	beq.n	80026d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002648:	e043      	b.n	80026d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002652:	d140      	bne.n	80026d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002658:	e03d      	b.n	80026d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002662:	d121      	bne.n	80026a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d837      	bhi.n	80026da <DMA_CheckFifoParam+0xda>
 800266a:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <DMA_CheckFifoParam+0x70>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	08002681 	.word	0x08002681
 8002674:	08002687 	.word	0x08002687
 8002678:	08002681 	.word	0x08002681
 800267c:	08002699 	.word	0x08002699
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      break;
 8002684:	e030      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d025      	beq.n	80026de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002696:	e022      	b.n	80026de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026a0:	d11f      	bne.n	80026e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026a6:	e01c      	b.n	80026e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d903      	bls.n	80026b6 <DMA_CheckFifoParam+0xb6>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d003      	beq.n	80026bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026b4:	e018      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
      break;
 80026ba:	e015      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e00b      	b.n	80026e6 <DMA_CheckFifoParam+0xe6>
      break;
 80026ce:	bf00      	nop
 80026d0:	e00a      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026d2:	bf00      	nop
 80026d4:	e008      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e006      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e004      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
 80026e0:	e002      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026e6:	bf00      	nop
    }
  } 
  
  return status; 
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	e165      	b.n	80029e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	f040 8154 	bne.w	80029da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d005      	beq.n	800274a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002746:	2b02      	cmp	r3, #2
 8002748:	d130      	bne.n	80027ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002780:	2201      	movs	r2, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 0201 	and.w	r2, r3, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d017      	beq.n	80027e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d123      	bne.n	800283c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	08da      	lsrs	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3208      	adds	r2, #8
 80027fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	220f      	movs	r2, #15
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	08da      	lsrs	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3208      	adds	r2, #8
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0203 	and.w	r2, r3, #3
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80ae 	beq.w	80029da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800289a:	4a58      	ldr	r2, [pc, #352]	; (80029fc <HAL_GPIO_Init+0x304>)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_GPIO_Init+0x308>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d025      	beq.n	8002912 <HAL_GPIO_Init+0x21a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4e      	ldr	r2, [pc, #312]	; (8002a04 <HAL_GPIO_Init+0x30c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01f      	beq.n	800290e <HAL_GPIO_Init+0x216>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4d      	ldr	r2, [pc, #308]	; (8002a08 <HAL_GPIO_Init+0x310>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_Init+0x212>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <HAL_GPIO_Init+0x314>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <HAL_GPIO_Init+0x318>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_GPIO_Init+0x20a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <HAL_GPIO_Init+0x31c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x206>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a49      	ldr	r2, [pc, #292]	; (8002a18 <HAL_GPIO_Init+0x320>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_GPIO_Init+0x202>
 80028f6:	2306      	movs	r3, #6
 80028f8:	e00c      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 80028fa:	2307      	movs	r3, #7
 80028fc:	e00a      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 80028fe:	2305      	movs	r3, #5
 8002900:	e008      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 8002902:	2304      	movs	r3, #4
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 8002906:	2303      	movs	r3, #3
 8002908:	e004      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 800290a:	2302      	movs	r3, #2
 800290c:	e002      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 8002912:	2300      	movs	r3, #0
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f002 0203 	and.w	r2, r2, #3
 800291a:	0092      	lsls	r2, r2, #2
 800291c:	4093      	lsls	r3, r2
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002924:	4935      	ldr	r1, [pc, #212]	; (80029fc <HAL_GPIO_Init+0x304>)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	3302      	adds	r3, #2
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002932:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002956:	4a31      	ldr	r2, [pc, #196]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800295c:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_GPIO_Init+0x324>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002980:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002986:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029aa:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <HAL_GPIO_Init+0x324>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_GPIO_Init+0x324>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d4:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <HAL_GPIO_Init+0x324>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3301      	adds	r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b0f      	cmp	r3, #15
 80029e4:	f67f ae96 	bls.w	8002714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40013800 	.word	0x40013800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40020400 	.word	0x40020400
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	40020c00 	.word	0x40020c00
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40021400 	.word	0x40021400
 8002a18:	40021800 	.word	0x40021800
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e001      	b.n	8002a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a6c:	e003      	b.n	8002a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0cc      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d90c      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0b8      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad8:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a58      	ldr	r2, [pc, #352]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	494d      	ldr	r1, [pc, #308]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d044      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d119      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e07f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e06f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e067      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4934      	ldr	r1, [pc, #208]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7fe fde0 	bl	8001738 <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe fddc 	bl	8001738 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e04f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d20c      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e032      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4916      	ldr	r1, [pc, #88]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	490e      	ldr	r1, [pc, #56]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0a:	f000 f821 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	490a      	ldr	r1, [pc, #40]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	5ccb      	ldrb	r3, [r1, r3]
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fd40 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023c00 	.word	0x40023c00
 8002c40:	40023800 	.word	0x40023800
 8002c44:	080057e0 	.word	0x080057e0
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c54:	b0ae      	sub	sp, #184	; 0xb8
 8002c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c76:	4bcb      	ldr	r3, [pc, #812]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	f200 8206 	bhi.w	8003090 <HAL_RCC_GetSysClockFreq+0x440>
 8002c84:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002cc1 	.word	0x08002cc1
 8002c90:	08003091 	.word	0x08003091
 8002c94:	08003091 	.word	0x08003091
 8002c98:	08003091 	.word	0x08003091
 8002c9c:	08002cc9 	.word	0x08002cc9
 8002ca0:	08003091 	.word	0x08003091
 8002ca4:	08003091 	.word	0x08003091
 8002ca8:	08003091 	.word	0x08003091
 8002cac:	08002cd1 	.word	0x08002cd1
 8002cb0:	08003091 	.word	0x08003091
 8002cb4:	08003091 	.word	0x08003091
 8002cb8:	08003091 	.word	0x08003091
 8002cbc:	08002ec1 	.word	0x08002ec1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4bb9      	ldr	r3, [pc, #740]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cc6:	e1e7      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc8:	4bb8      	ldr	r3, [pc, #736]	; (8002fac <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cce:	e1e3      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd0:	4bb4      	ldr	r3, [pc, #720]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cdc:	4bb1      	ldr	r3, [pc, #708]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d071      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce8:	4bae      	ldr	r3, [pc, #696]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cf4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d0e:	4622      	mov	r2, r4
 8002d10:	462b      	mov	r3, r5
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	0159      	lsls	r1, r3, #5
 8002d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d20:	0150      	lsls	r0, r2, #5
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4621      	mov	r1, r4
 8002d28:	1a51      	subs	r1, r2, r1
 8002d2a:	6439      	str	r1, [r7, #64]	; 0x40
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d40:	4649      	mov	r1, r9
 8002d42:	018b      	lsls	r3, r1, #6
 8002d44:	4641      	mov	r1, r8
 8002d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	018a      	lsls	r2, r1, #6
 8002d4e:	4641      	mov	r1, r8
 8002d50:	1a51      	subs	r1, r2, r1
 8002d52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d54:	4649      	mov	r1, r9
 8002d56:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d68:	4649      	mov	r1, r9
 8002d6a:	00cb      	lsls	r3, r1, #3
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d72:	4641      	mov	r1, r8
 8002d74:	00ca      	lsls	r2, r1, #3
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	189b      	adds	r3, r3, r2
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
 8002d82:	462b      	mov	r3, r5
 8002d84:	460a      	mov	r2, r1
 8002d86:	eb42 0303 	adc.w	r3, r2, r3
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d98:	4629      	mov	r1, r5
 8002d9a:	024b      	lsls	r3, r1, #9
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002da2:	4621      	mov	r1, r4
 8002da4:	024a      	lsls	r2, r1, #9
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002db4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002db8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002dbc:	f7fd fdda 	bl	8000974 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dca:	e067      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dcc:	4b75      	ldr	r3, [pc, #468]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002de6:	2300      	movs	r3, #0
 8002de8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002dee:	4622      	mov	r2, r4
 8002df0:	462b      	mov	r3, r5
 8002df2:	f04f 0000 	mov.w	r0, #0
 8002df6:	f04f 0100 	mov.w	r1, #0
 8002dfa:	0159      	lsls	r1, r3, #5
 8002dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e00:	0150      	lsls	r0, r2, #5
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4621      	mov	r1, r4
 8002e08:	1a51      	subs	r1, r2, r1
 8002e0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e20:	4649      	mov	r1, r9
 8002e22:	018b      	lsls	r3, r1, #6
 8002e24:	4641      	mov	r1, r8
 8002e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e2a:	4641      	mov	r1, r8
 8002e2c:	018a      	lsls	r2, r1, #6
 8002e2e:	4641      	mov	r1, r8
 8002e30:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e34:	4649      	mov	r1, r9
 8002e36:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e4e:	4692      	mov	sl, r2
 8002e50:	469b      	mov	fp, r3
 8002e52:	4623      	mov	r3, r4
 8002e54:	eb1a 0303 	adds.w	r3, sl, r3
 8002e58:	623b      	str	r3, [r7, #32]
 8002e5a:	462b      	mov	r3, r5
 8002e5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e84:	2200      	movs	r2, #0
 8002e86:	673b      	str	r3, [r7, #112]	; 0x70
 8002e88:	677a      	str	r2, [r7, #116]	; 0x74
 8002e8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e8e:	f7fd fd71 	bl	8000974 <__aeabi_uldivmod>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4613      	mov	r3, r2
 8002e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e9c:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ebe:	e0eb      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec0:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ecc:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d06b      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed8:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	099b      	lsrs	r3, r3, #6
 8002ede:	2200      	movs	r2, #0
 8002ee0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ee2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eea:	663b      	str	r3, [r7, #96]	; 0x60
 8002eec:	2300      	movs	r3, #0
 8002eee:	667b      	str	r3, [r7, #100]	; 0x64
 8002ef0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	462b      	mov	r3, r5
 8002ef8:	f04f 0000 	mov.w	r0, #0
 8002efc:	f04f 0100 	mov.w	r1, #0
 8002f00:	0159      	lsls	r1, r3, #5
 8002f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f06:	0150      	lsls	r0, r2, #5
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	1a51      	subs	r1, r2, r1
 8002f10:	61b9      	str	r1, [r7, #24]
 8002f12:	4629      	mov	r1, r5
 8002f14:	eb63 0301 	sbc.w	r3, r3, r1
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f26:	4659      	mov	r1, fp
 8002f28:	018b      	lsls	r3, r1, #6
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f30:	4651      	mov	r1, sl
 8002f32:	018a      	lsls	r2, r1, #6
 8002f34:	4651      	mov	r1, sl
 8002f36:	ebb2 0801 	subs.w	r8, r2, r1
 8002f3a:	4659      	mov	r1, fp
 8002f3c:	eb63 0901 	sbc.w	r9, r3, r1
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f54:	4690      	mov	r8, r2
 8002f56:	4699      	mov	r9, r3
 8002f58:	4623      	mov	r3, r4
 8002f5a:	eb18 0303 	adds.w	r3, r8, r3
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	462b      	mov	r3, r5
 8002f62:	eb49 0303 	adc.w	r3, r9, r3
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f74:	4629      	mov	r1, r5
 8002f76:	024b      	lsls	r3, r1, #9
 8002f78:	4621      	mov	r1, r4
 8002f7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f7e:	4621      	mov	r1, r4
 8002f80:	024a      	lsls	r2, r1, #9
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f8e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f94:	f7fd fcee 	bl	8000974 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fa2:	e065      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x420>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb0:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	4611      	mov	r1, r2
 8002fbc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fc0:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002fca:	4642      	mov	r2, r8
 8002fcc:	464b      	mov	r3, r9
 8002fce:	f04f 0000 	mov.w	r0, #0
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	0159      	lsls	r1, r3, #5
 8002fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fdc:	0150      	lsls	r0, r2, #5
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4641      	mov	r1, r8
 8002fe4:	1a51      	subs	r1, r2, r1
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	4649      	mov	r1, r9
 8002fea:	eb63 0301 	sbc.w	r3, r3, r1
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	018b      	lsls	r3, r1, #6
 8003000:	4651      	mov	r1, sl
 8003002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003006:	4651      	mov	r1, sl
 8003008:	018a      	lsls	r2, r1, #6
 800300a:	4651      	mov	r1, sl
 800300c:	1a54      	subs	r4, r2, r1
 800300e:	4659      	mov	r1, fp
 8003010:	eb63 0501 	sbc.w	r5, r3, r1
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	00eb      	lsls	r3, r5, #3
 800301e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003022:	00e2      	lsls	r2, r4, #3
 8003024:	4614      	mov	r4, r2
 8003026:	461d      	mov	r5, r3
 8003028:	4643      	mov	r3, r8
 800302a:	18e3      	adds	r3, r4, r3
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	464b      	mov	r3, r9
 8003030:	eb45 0303 	adc.w	r3, r5, r3
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003042:	4629      	mov	r1, r5
 8003044:	028b      	lsls	r3, r1, #10
 8003046:	4621      	mov	r1, r4
 8003048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800304c:	4621      	mov	r1, r4
 800304e:	028a      	lsls	r2, r1, #10
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003058:	2200      	movs	r2, #0
 800305a:	64bb      	str	r3, [r7, #72]	; 0x48
 800305c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800305e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003062:	f7fd fc87 	bl	8000974 <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4613      	mov	r3, r2
 800306c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	0f1b      	lsrs	r3, r3, #28
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800307e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800308e:	e003      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8003092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003096:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800309c:	4618      	mov	r0, r3
 800309e:	37b8      	adds	r7, #184	; 0xb8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800
 80030ac:	00f42400 	.word	0x00f42400

080030b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e28d      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8083 	beq.w	80031d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030d0:	4b94      	ldr	r3, [pc, #592]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d019      	beq.n	8003110 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030dc:	4b91      	ldr	r3, [pc, #580]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030e8:	4b8e      	ldr	r3, [pc, #568]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f4:	d00c      	beq.n	8003110 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f6:	4b8b      	ldr	r3, [pc, #556]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d112      	bne.n	8003128 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310e:	d10b      	bne.n	8003128 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	4b84      	ldr	r3, [pc, #528]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05b      	beq.n	80031d4 <HAL_RCC_OscConfig+0x124>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d157      	bne.n	80031d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e25a      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x90>
 8003132:	4b7c      	ldr	r3, [pc, #496]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7b      	ldr	r2, [pc, #492]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xcc>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0xb4>
 800314a:	4b76      	ldr	r3, [pc, #472]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a75      	ldr	r2, [pc, #468]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b73      	ldr	r3, [pc, #460]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a72      	ldr	r2, [pc, #456]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xcc>
 8003164:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a6e      	ldr	r2, [pc, #440]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6b      	ldr	r2, [pc, #428]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fad8 	bl	8001738 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe fad4 	bl	8001738 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e21f      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xdc>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fac4 	bl	8001738 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe fac0 	bl	8001738 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e20b      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	4b57      	ldr	r3, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x104>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d06f      	beq.n	80032c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031e2:	4b50      	ldr	r3, [pc, #320]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d017      	beq.n	800321e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ee:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d105      	bne.n	8003206 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031fa:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003206:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d11c      	bne.n	800324c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003212:	4b44      	ldr	r3, [pc, #272]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d116      	bne.n	800324c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_RCC_OscConfig+0x186>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1d3      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4937      	ldr	r1, [pc, #220]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	e03a      	b.n	80032c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003254:	4b34      	ldr	r3, [pc, #208]	; (8003328 <HAL_RCC_OscConfig+0x278>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fe fa6d 	bl	8001738 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003262:	f7fe fa69 	bl	8001738 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e1b4      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4925      	ldr	r1, [pc, #148]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_RCC_OscConfig+0x278>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fa4c 	bl	8001738 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a4:	f7fe fa48 	bl	8001738 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e193      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b6:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d036      	beq.n	800333c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_RCC_OscConfig+0x27c>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032dc:	f7fe fa2c 	bl	8001738 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e4:	f7fe fa28 	bl	8001738 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e173      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_OscConfig+0x274>)
 80032f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x234>
 8003302:	e01b      	b.n	800333c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_OscConfig+0x27c>)
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fe fa15 	bl	8001738 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	e00e      	b.n	8003330 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003312:	f7fe fa11 	bl	8001738 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d907      	bls.n	8003330 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e15c      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
 8003324:	40023800 	.word	0x40023800
 8003328:	42470000 	.word	0x42470000
 800332c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003330:	4b8a      	ldr	r3, [pc, #552]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ea      	bne.n	8003312 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8097 	beq.w	8003478 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334e:	4b83      	ldr	r3, [pc, #524]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10f      	bne.n	800337a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	4b7f      	ldr	r3, [pc, #508]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a7e      	ldr	r2, [pc, #504]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
 800336a:	4b7c      	ldr	r3, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003376:	2301      	movs	r3, #1
 8003378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337a:	4b79      	ldr	r3, [pc, #484]	; (8003560 <HAL_RCC_OscConfig+0x4b0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d118      	bne.n	80033b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003386:	4b76      	ldr	r3, [pc, #472]	; (8003560 <HAL_RCC_OscConfig+0x4b0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a75      	ldr	r2, [pc, #468]	; (8003560 <HAL_RCC_OscConfig+0x4b0>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003392:	f7fe f9d1 	bl	8001738 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339a:	f7fe f9cd 	bl	8001738 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e118      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	4b6c      	ldr	r3, [pc, #432]	; (8003560 <HAL_RCC_OscConfig+0x4b0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x31e>
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	e01c      	b.n	8003408 <HAL_RCC_OscConfig+0x358>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x340>
 80033d6:	4b61      	ldr	r3, [pc, #388]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a60      	ldr	r2, [pc, #384]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
 80033e2:	4b5e      	ldr	r3, [pc, #376]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a5d      	ldr	r2, [pc, #372]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	e00b      	b.n	8003408 <HAL_RCC_OscConfig+0x358>
 80033f0:	4b5a      	ldr	r3, [pc, #360]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	4a59      	ldr	r2, [pc, #356]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
 80033fc:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a56      	ldr	r2, [pc, #344]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003402:	f023 0304 	bic.w	r3, r3, #4
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fe f992 	bl	8001738 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003416:	e00a      	b.n	800342e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7fe f98e 	bl	8001738 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e0d7      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342e:	4b4b      	ldr	r3, [pc, #300]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ee      	beq.n	8003418 <HAL_RCC_OscConfig+0x368>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe f97c 	bl	8001738 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fe f978 	bl	8001738 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0c1      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345a:	4b40      	ldr	r3, [pc, #256]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ee      	bne.n	8003444 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346c:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	4a3a      	ldr	r2, [pc, #232]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003476:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80ad 	beq.w	80035dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003482:	4b36      	ldr	r3, [pc, #216]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b08      	cmp	r3, #8
 800348c:	d060      	beq.n	8003550 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d145      	bne.n	8003522 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <HAL_RCC_OscConfig+0x4b4>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe f94c 	bl	8001738 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe f948 	bl	8001738 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e093      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	3b01      	subs	r3, #1
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	071b      	lsls	r3, r3, #28
 80034ee:	491b      	ldr	r1, [pc, #108]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_RCC_OscConfig+0x4b4>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fe f91d 	bl	8001738 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe f919 	bl	8001738 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e064      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x452>
 8003520:	e05c      	b.n	80035dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <HAL_RCC_OscConfig+0x4b4>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe f906 	bl	8001738 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe f902 	bl	8001738 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e04d      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_OscConfig+0x4ac>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x480>
 800354e:	e045      	b.n	80035dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e040      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
 800355c:	40023800 	.word	0x40023800
 8003560:	40007000 	.word	0x40007000
 8003564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003568:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <HAL_RCC_OscConfig+0x538>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d030      	beq.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d129      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d122      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800359e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d119      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	3b01      	subs	r3, #1
 80035b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d10f      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800

080035ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e041      	b.n	8003682 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fec6 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f000 fcc6 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e041      	b.n	8003720 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f839 	bl	8003728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f000 fc77 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e022      	b.n	80037ae <HAL_TIM_PWM_Start_DMA+0x72>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b04      	cmp	r3, #4
 800376c:	d109      	bne.n	8003782 <HAL_TIM_PWM_Start_DMA+0x46>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e015      	b.n	80037ae <HAL_TIM_PWM_Start_DMA+0x72>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d109      	bne.n	800379c <HAL_TIM_PWM_Start_DMA+0x60>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e008      	b.n	80037ae <HAL_TIM_PWM_Start_DMA+0x72>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
 80037b4:	e171      	b.n	8003a9a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start_DMA+0x94>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e022      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0xda>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d109      	bne.n	80037ea <HAL_TIM_PWM_Start_DMA+0xae>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e015      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0xda>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d109      	bne.n	8003804 <HAL_TIM_PWM_Start_DMA+0xc8>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e008      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0xda>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d024      	beq.n	8003864 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start_DMA+0xee>
 8003820:	887b      	ldrh	r3, [r7, #2]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e137      	b.n	8003a9a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_TIM_PWM_Start_DMA+0xfe>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003838:	e016      	b.n	8003868 <HAL_TIM_PWM_Start_DMA+0x12c>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d104      	bne.n	800384a <HAL_TIM_PWM_Start_DMA+0x10e>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003848:	e00e      	b.n	8003868 <HAL_TIM_PWM_Start_DMA+0x12c>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d104      	bne.n	800385a <HAL_TIM_PWM_Start_DMA+0x11e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003858:	e006      	b.n	8003868 <HAL_TIM_PWM_Start_DMA+0x12c>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003862:	e001      	b.n	8003868 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e118      	b.n	8003a9a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	f200 80ae 	bhi.w	80039cc <HAL_TIM_PWM_Start_DMA+0x290>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	080038ad 	.word	0x080038ad
 800387c:	080039cd 	.word	0x080039cd
 8003880:	080039cd 	.word	0x080039cd
 8003884:	080039cd 	.word	0x080039cd
 8003888:	080038f5 	.word	0x080038f5
 800388c:	080039cd 	.word	0x080039cd
 8003890:	080039cd 	.word	0x080039cd
 8003894:	080039cd 	.word	0x080039cd
 8003898:	0800393d 	.word	0x0800393d
 800389c:	080039cd 	.word	0x080039cd
 80038a0:	080039cd 	.word	0x080039cd
 80038a4:	080039cd 	.word	0x080039cd
 80038a8:	08003985 	.word	0x08003985
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	4a7c      	ldr	r2, [pc, #496]	; (8003aa4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	4a7b      	ldr	r2, [pc, #492]	; (8003aa8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	4a7a      	ldr	r2, [pc, #488]	; (8003aac <HAL_TIM_PWM_Start_DMA+0x370>)
 80038c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3334      	adds	r3, #52	; 0x34
 80038d0:	461a      	mov	r2, r3
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	f7fe fc4e 	bl	8002174 <HAL_DMA_Start_IT>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0db      	b.n	8003a9a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f0:	60da      	str	r2, [r3, #12]
      break;
 80038f2:	e06e      	b.n	80039d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	4a6a      	ldr	r2, [pc, #424]	; (8003aa4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80038fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	4a69      	ldr	r2, [pc, #420]	; (8003aa8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	4a68      	ldr	r2, [pc, #416]	; (8003aac <HAL_TIM_PWM_Start_DMA+0x370>)
 800390a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3338      	adds	r3, #56	; 0x38
 8003918:	461a      	mov	r2, r3
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	f7fe fc2a 	bl	8002174 <HAL_DMA_Start_IT>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0b7      	b.n	8003a9a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003938:	60da      	str	r2, [r3, #12]
      break;
 800393a:	e04a      	b.n	80039d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003942:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	4a57      	ldr	r2, [pc, #348]	; (8003aa8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800394a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	4a56      	ldr	r2, [pc, #344]	; (8003aac <HAL_TIM_PWM_Start_DMA+0x370>)
 8003952:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	333c      	adds	r3, #60	; 0x3c
 8003960:	461a      	mov	r2, r3
 8003962:	887b      	ldrh	r3, [r7, #2]
 8003964:	f7fe fc06 	bl	8002174 <HAL_DMA_Start_IT>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e093      	b.n	8003a9a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003980:	60da      	str	r2, [r3, #12]
      break;
 8003982:	e026      	b.n	80039d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	4a46      	ldr	r2, [pc, #280]	; (8003aa4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800398a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	4a45      	ldr	r2, [pc, #276]	; (8003aa8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003992:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	4a44      	ldr	r2, [pc, #272]	; (8003aac <HAL_TIM_PWM_Start_DMA+0x370>)
 800399a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3340      	adds	r3, #64	; 0x40
 80039a8:	461a      	mov	r2, r3
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	f7fe fbe2 	bl	8002174 <HAL_DMA_Start_IT>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06f      	b.n	8003a9a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039c8:	60da      	str	r2, [r3, #12]
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      break;
 80039d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d15f      	bne.n	8003a98 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fdd5 	bl	8004590 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a31      	ldr	r2, [pc, #196]	; (8003ab0 <HAL_TIM_PWM_Start_DMA+0x374>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_TIM_PWM_Start_DMA+0x2be>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <HAL_TIM_PWM_Start_DMA+0x378>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_Start_DMA+0x2c2>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d01d      	beq.n	8003a64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a21      	ldr	r2, [pc, #132]	; (8003abc <HAL_TIM_PWM_Start_DMA+0x380>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ac8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d111      	bne.n	8003a88 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d010      	beq.n	8003a98 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	e007      	b.n	8003a98 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08003ead 	.word	0x08003ead
 8003aa8:	08003f55 	.word	0x08003f55
 8003aac:	08003e1b 	.word	0x08003e1b
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40010400 	.word	0x40010400
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40001800 	.word	0x40001800

08003acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e0ae      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b0c      	cmp	r3, #12
 8003af6:	f200 809f 	bhi.w	8003c38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b35 	.word	0x08003b35
 8003b04:	08003c39 	.word	0x08003c39
 8003b08:	08003c39 	.word	0x08003c39
 8003b0c:	08003c39 	.word	0x08003c39
 8003b10:	08003b75 	.word	0x08003b75
 8003b14:	08003c39 	.word	0x08003c39
 8003b18:	08003c39 	.word	0x08003c39
 8003b1c:	08003c39 	.word	0x08003c39
 8003b20:	08003bb7 	.word	0x08003bb7
 8003b24:	08003c39 	.word	0x08003c39
 8003b28:	08003c39 	.word	0x08003c39
 8003b2c:	08003c39 	.word	0x08003c39
 8003b30:	08003bf7 	.word	0x08003bf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fade 	bl	80040fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0208 	orr.w	r2, r2, #8
 8003b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6999      	ldr	r1, [r3, #24]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	619a      	str	r2, [r3, #24]
      break;
 8003b72:	e064      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fb2e 	bl	80041dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6999      	ldr	r1, [r3, #24]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	619a      	str	r2, [r3, #24]
      break;
 8003bb4:	e043      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fb83 	bl	80042c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0208 	orr.w	r2, r2, #8
 8003bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0204 	bic.w	r2, r2, #4
 8003be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69d9      	ldr	r1, [r3, #28]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	61da      	str	r2, [r3, #28]
      break;
 8003bf4:	e023      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fbd7 	bl	80043b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69d9      	ldr	r1, [r3, #28]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	021a      	lsls	r2, r3, #8
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	61da      	str	r2, [r3, #28]
      break;
 8003c36:	e002      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e0b4      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x186>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d03e      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0xd4>
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	f200 8087 	bhi.w	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb2:	f000 8086 	beq.w	8003dc2 <HAL_TIM_ConfigClockSource+0x172>
 8003cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cba:	d87f      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b70      	cmp	r3, #112	; 0x70
 8003cbe:	d01a      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8003cc0:	2b70      	cmp	r3, #112	; 0x70
 8003cc2:	d87b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d050      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x11a>
 8003cc8:	2b60      	cmp	r3, #96	; 0x60
 8003cca:	d877      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b50      	cmp	r3, #80	; 0x50
 8003cce:	d03c      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0xfa>
 8003cd0:	2b50      	cmp	r3, #80	; 0x50
 8003cd2:	d873      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d058      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x13a>
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d86f      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b30      	cmp	r3, #48	; 0x30
 8003cde:	d064      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d86b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d060      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d867      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05c      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d05a      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003cf4:	e062      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6899      	ldr	r1, [r3, #8]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f000 fc23 	bl	8004550 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	609a      	str	r2, [r3, #8]
      break;
 8003d22:	e04f      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f000 fc0c 	bl	8004550 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d46:	609a      	str	r2, [r3, #8]
      break;
 8003d48:	e03c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f000 fb80 	bl	800445c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2150      	movs	r1, #80	; 0x50
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fbd9 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8003d68:	e02c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f000 fb9f 	bl	80044ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2160      	movs	r1, #96	; 0x60
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fbc9 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8003d88:	e01c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f000 fb60 	bl	800445c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fbb9 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8003da8:	e00c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f000 fbb0 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8003dba:	e003      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d107      	bne.n	8003e42 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e40:	e02a      	b.n	8003e98 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e5a:	e01d      	b.n	8003e98 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d107      	bne.n	8003e76 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e74:	e010      	b.n	8003e98 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2208      	movs	r2, #8
 8003e84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e8e:	e003      	b.n	8003e98 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff ffb4 	bl	8003e06 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d10b      	bne.n	8003edc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d136      	bne.n	8003f40 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eda:	e031      	b.n	8003f40 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d10b      	bne.n	8003efe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d125      	bne.n	8003f40 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003efc:	e020      	b.n	8003f40 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d10b      	bne.n	8003f20 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d114      	bne.n	8003f40 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f1e:	e00f      	b.n	8003f40 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d10a      	bne.n	8003f40 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff ff4c 	bl	8003dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d103      	bne.n	8003f74 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	771a      	strb	r2, [r3, #28]
 8003f72:	e019      	b.n	8003fa8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d103      	bne.n	8003f86 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2202      	movs	r2, #2
 8003f82:	771a      	strb	r2, [r3, #28]
 8003f84:	e010      	b.n	8003fa8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d103      	bne.n	8003f98 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2204      	movs	r2, #4
 8003f94:	771a      	strb	r2, [r3, #28]
 8003f96:	e007      	b.n	8003fa8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d102      	bne.n	8003fa8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff ff22 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a40      	ldr	r2, [pc, #256]	; (80040d0 <TIM_Base_SetConfig+0x114>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fda:	d00f      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3d      	ldr	r2, [pc, #244]	; (80040d4 <TIM_Base_SetConfig+0x118>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3c      	ldr	r2, [pc, #240]	; (80040d8 <TIM_Base_SetConfig+0x11c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3b      	ldr	r2, [pc, #236]	; (80040dc <TIM_Base_SetConfig+0x120>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3a      	ldr	r2, [pc, #232]	; (80040e0 <TIM_Base_SetConfig+0x124>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d108      	bne.n	800400e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2f      	ldr	r2, [pc, #188]	; (80040d0 <TIM_Base_SetConfig+0x114>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d02b      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401c:	d027      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <TIM_Base_SetConfig+0x118>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d023      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2b      	ldr	r2, [pc, #172]	; (80040d8 <TIM_Base_SetConfig+0x11c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01f      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <TIM_Base_SetConfig+0x120>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01b      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a29      	ldr	r2, [pc, #164]	; (80040e0 <TIM_Base_SetConfig+0x124>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d017      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <TIM_Base_SetConfig+0x128>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a27      	ldr	r2, [pc, #156]	; (80040e8 <TIM_Base_SetConfig+0x12c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00f      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a26      	ldr	r2, [pc, #152]	; (80040ec <TIM_Base_SetConfig+0x130>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00b      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <TIM_Base_SetConfig+0x134>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d007      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a24      	ldr	r2, [pc, #144]	; (80040f4 <TIM_Base_SetConfig+0x138>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d003      	beq.n	800406e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a23      	ldr	r2, [pc, #140]	; (80040f8 <TIM_Base_SetConfig+0x13c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d108      	bne.n	8004080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <TIM_Base_SetConfig+0x114>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_Base_SetConfig+0xf8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <TIM_Base_SetConfig+0x124>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d103      	bne.n	80040bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	615a      	str	r2, [r3, #20]
}
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40010400 	.word	0x40010400
 80040e4:	40014000 	.word	0x40014000
 80040e8:	40014400 	.word	0x40014400
 80040ec:	40014800 	.word	0x40014800
 80040f0:	40001800 	.word	0x40001800
 80040f4:	40001c00 	.word	0x40001c00
 80040f8:	40002000 	.word	0x40002000

080040fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f023 0201 	bic.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f023 0302 	bic.w	r3, r3, #2
 8004144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <TIM_OC1_SetConfig+0xd8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_OC1_SetConfig+0x64>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a1f      	ldr	r2, [pc, #124]	; (80041d8 <TIM_OC1_SetConfig+0xdc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10c      	bne.n	800417a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0308 	bic.w	r3, r3, #8
 8004166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <TIM_OC1_SetConfig+0xd8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_OC1_SetConfig+0x8e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <TIM_OC1_SetConfig+0xdc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d111      	bne.n	80041ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40010400 	.word	0x40010400

080041dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f023 0210 	bic.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0320 	bic.w	r3, r3, #32
 8004226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <TIM_OC2_SetConfig+0xe4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_OC2_SetConfig+0x68>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a21      	ldr	r2, [pc, #132]	; (80042c4 <TIM_OC2_SetConfig+0xe8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d10d      	bne.n	8004260 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <TIM_OC2_SetConfig+0xe4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_OC2_SetConfig+0x94>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a16      	ldr	r2, [pc, #88]	; (80042c4 <TIM_OC2_SetConfig+0xe8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d113      	bne.n	8004298 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40010400 	.word	0x40010400

080042c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a21      	ldr	r2, [pc, #132]	; (80043a8 <TIM_OC3_SetConfig+0xe0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_OC3_SetConfig+0x66>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a20      	ldr	r2, [pc, #128]	; (80043ac <TIM_OC3_SetConfig+0xe4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d10d      	bne.n	800434a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a16      	ldr	r2, [pc, #88]	; (80043a8 <TIM_OC3_SetConfig+0xe0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <TIM_OC3_SetConfig+0x92>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a15      	ldr	r2, [pc, #84]	; (80043ac <TIM_OC3_SetConfig+0xe4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d113      	bne.n	8004382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	621a      	str	r2, [r3, #32]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40010400 	.word	0x40010400

080043b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a12      	ldr	r2, [pc, #72]	; (8004454 <TIM_OC4_SetConfig+0xa4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_OC4_SetConfig+0x68>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a11      	ldr	r2, [pc, #68]	; (8004458 <TIM_OC4_SetConfig+0xa8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d109      	bne.n	800442c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800441e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000
 8004458:	40010400 	.word	0x40010400

0800445c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0201 	bic.w	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 030a 	bic.w	r3, r3, #10
 8004498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0210 	bic.w	r2, r3, #16
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	031b      	lsls	r3, r3, #12
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	f043 0307 	orr.w	r3, r3, #7
 800453c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	021a      	lsls	r2, r3, #8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	431a      	orrs	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4313      	orrs	r3, r2
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	609a      	str	r2, [r3, #8]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	2201      	movs	r2, #1
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1a      	ldr	r2, [r3, #32]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	401a      	ands	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e05a      	b.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d022      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004640:	d01d      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d018      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00e      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d009      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d10c      	bne.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4313      	orrs	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40010400 	.word	0x40010400
 80046cc:	40014000 	.word	0x40014000
 80046d0:	40001800 	.word	0x40001800

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4d0d      	ldr	r5, [pc, #52]	; (800470c <__libc_init_array+0x38>)
 80046d8:	4c0d      	ldr	r4, [pc, #52]	; (8004710 <__libc_init_array+0x3c>)
 80046da:	1b64      	subs	r4, r4, r5
 80046dc:	10a4      	asrs	r4, r4, #2
 80046de:	2600      	movs	r6, #0
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	4d0b      	ldr	r5, [pc, #44]	; (8004714 <__libc_init_array+0x40>)
 80046e6:	4c0c      	ldr	r4, [pc, #48]	; (8004718 <__libc_init_array+0x44>)
 80046e8:	f001 f86c 	bl	80057c4 <_init>
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	2600      	movs	r6, #0
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	f855 3b04 	ldr.w	r3, [r5], #4
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	080059d8 	.word	0x080059d8
 8004710:	080059d8 	.word	0x080059d8
 8004714:	080059d8 	.word	0x080059d8
 8004718:	080059dc 	.word	0x080059dc

0800471c <memset>:
 800471c:	4402      	add	r2, r0
 800471e:	4603      	mov	r3, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>
 800472c:	0000      	movs	r0, r0
	...

08004730 <sin>:
 8004730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004732:	ec53 2b10 	vmov	r2, r3, d0
 8004736:	4828      	ldr	r0, [pc, #160]	; (80047d8 <sin+0xa8>)
 8004738:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800473c:	4281      	cmp	r1, r0
 800473e:	dc07      	bgt.n	8004750 <sin+0x20>
 8004740:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80047d0 <sin+0xa0>
 8004744:	2000      	movs	r0, #0
 8004746:	b005      	add	sp, #20
 8004748:	f85d eb04 	ldr.w	lr, [sp], #4
 800474c:	f000 be6c 	b.w	8005428 <__kernel_sin>
 8004750:	4822      	ldr	r0, [pc, #136]	; (80047dc <sin+0xac>)
 8004752:	4281      	cmp	r1, r0
 8004754:	dd09      	ble.n	800476a <sin+0x3a>
 8004756:	ee10 0a10 	vmov	r0, s0
 800475a:	4619      	mov	r1, r3
 800475c:	f7fb fe82 	bl	8000464 <__aeabi_dsub>
 8004760:	ec41 0b10 	vmov	d0, r0, r1
 8004764:	b005      	add	sp, #20
 8004766:	f85d fb04 	ldr.w	pc, [sp], #4
 800476a:	4668      	mov	r0, sp
 800476c:	f000 f838 	bl	80047e0 <__ieee754_rem_pio2>
 8004770:	f000 0003 	and.w	r0, r0, #3
 8004774:	2801      	cmp	r0, #1
 8004776:	d00c      	beq.n	8004792 <sin+0x62>
 8004778:	2802      	cmp	r0, #2
 800477a:	d011      	beq.n	80047a0 <sin+0x70>
 800477c:	b9f0      	cbnz	r0, 80047bc <sin+0x8c>
 800477e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004782:	ed9d 0b00 	vldr	d0, [sp]
 8004786:	2001      	movs	r0, #1
 8004788:	f000 fe4e 	bl	8005428 <__kernel_sin>
 800478c:	ec51 0b10 	vmov	r0, r1, d0
 8004790:	e7e6      	b.n	8004760 <sin+0x30>
 8004792:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004796:	ed9d 0b00 	vldr	d0, [sp]
 800479a:	f000 fa2d 	bl	8004bf8 <__kernel_cos>
 800479e:	e7f5      	b.n	800478c <sin+0x5c>
 80047a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047a4:	ed9d 0b00 	vldr	d0, [sp]
 80047a8:	2001      	movs	r0, #1
 80047aa:	f000 fe3d 	bl	8005428 <__kernel_sin>
 80047ae:	ec53 2b10 	vmov	r2, r3, d0
 80047b2:	ee10 0a10 	vmov	r0, s0
 80047b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80047ba:	e7d1      	b.n	8004760 <sin+0x30>
 80047bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047c0:	ed9d 0b00 	vldr	d0, [sp]
 80047c4:	f000 fa18 	bl	8004bf8 <__kernel_cos>
 80047c8:	e7f1      	b.n	80047ae <sin+0x7e>
 80047ca:	bf00      	nop
 80047cc:	f3af 8000 	nop.w
	...
 80047d8:	3fe921fb 	.word	0x3fe921fb
 80047dc:	7fefffff 	.word	0x7fefffff

080047e0 <__ieee754_rem_pio2>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	ed2d 8b02 	vpush	{d8}
 80047e8:	ec55 4b10 	vmov	r4, r5, d0
 80047ec:	4bca      	ldr	r3, [pc, #808]	; (8004b18 <__ieee754_rem_pio2+0x338>)
 80047ee:	b08b      	sub	sp, #44	; 0x2c
 80047f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80047f4:	4598      	cmp	r8, r3
 80047f6:	4682      	mov	sl, r0
 80047f8:	9502      	str	r5, [sp, #8]
 80047fa:	dc08      	bgt.n	800480e <__ieee754_rem_pio2+0x2e>
 80047fc:	2200      	movs	r2, #0
 80047fe:	2300      	movs	r3, #0
 8004800:	ed80 0b00 	vstr	d0, [r0]
 8004804:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004808:	f04f 0b00 	mov.w	fp, #0
 800480c:	e028      	b.n	8004860 <__ieee754_rem_pio2+0x80>
 800480e:	4bc3      	ldr	r3, [pc, #780]	; (8004b1c <__ieee754_rem_pio2+0x33c>)
 8004810:	4598      	cmp	r8, r3
 8004812:	dc78      	bgt.n	8004906 <__ieee754_rem_pio2+0x126>
 8004814:	9b02      	ldr	r3, [sp, #8]
 8004816:	4ec2      	ldr	r6, [pc, #776]	; (8004b20 <__ieee754_rem_pio2+0x340>)
 8004818:	2b00      	cmp	r3, #0
 800481a:	ee10 0a10 	vmov	r0, s0
 800481e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x300>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	4629      	mov	r1, r5
 8004826:	dd39      	ble.n	800489c <__ieee754_rem_pio2+0xbc>
 8004828:	f7fb fe1c 	bl	8000464 <__aeabi_dsub>
 800482c:	45b0      	cmp	r8, r6
 800482e:	4604      	mov	r4, r0
 8004830:	460d      	mov	r5, r1
 8004832:	d01b      	beq.n	800486c <__ieee754_rem_pio2+0x8c>
 8004834:	a3ac      	add	r3, pc, #688	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fe13 	bl	8000464 <__aeabi_dsub>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	e9ca 2300 	strd	r2, r3, [sl]
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fb fe0b 	bl	8000464 <__aeabi_dsub>
 800484e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f7fb fe06 	bl	8000464 <__aeabi_dsub>
 8004858:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800485c:	f04f 0b01 	mov.w	fp, #1
 8004860:	4658      	mov	r0, fp
 8004862:	b00b      	add	sp, #44	; 0x2c
 8004864:	ecbd 8b02 	vpop	{d8}
 8004868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x310>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb fdf7 	bl	8000464 <__aeabi_dsub>
 8004876:	a3a0      	add	r3, pc, #640	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	4604      	mov	r4, r0
 800487e:	460d      	mov	r5, r1
 8004880:	f7fb fdf0 	bl	8000464 <__aeabi_dsub>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	e9ca 2300 	strd	r2, r3, [sl]
 800488c:	4620      	mov	r0, r4
 800488e:	4629      	mov	r1, r5
 8004890:	f7fb fde8 	bl	8000464 <__aeabi_dsub>
 8004894:	a398      	add	r3, pc, #608	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	e7db      	b.n	8004854 <__ieee754_rem_pio2+0x74>
 800489c:	f7fb fde4 	bl	8000468 <__adddf3>
 80048a0:	45b0      	cmp	r8, r6
 80048a2:	4604      	mov	r4, r0
 80048a4:	460d      	mov	r5, r1
 80048a6:	d016      	beq.n	80048d6 <__ieee754_rem_pio2+0xf6>
 80048a8:	a38f      	add	r3, pc, #572	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	f7fb fddb 	bl	8000468 <__adddf3>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	e9ca 2300 	strd	r2, r3, [sl]
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f7fb fdd1 	bl	8000464 <__aeabi_dsub>
 80048c2:	a389      	add	r3, pc, #548	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f7fb fdce 	bl	8000468 <__adddf3>
 80048cc:	f04f 3bff 	mov.w	fp, #4294967295
 80048d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048d4:	e7c4      	b.n	8004860 <__ieee754_rem_pio2+0x80>
 80048d6:	a386      	add	r3, pc, #536	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x310>)
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f7fb fdc4 	bl	8000468 <__adddf3>
 80048e0:	a385      	add	r3, pc, #532	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	4604      	mov	r4, r0
 80048e8:	460d      	mov	r5, r1
 80048ea:	f7fb fdbd 	bl	8000468 <__adddf3>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	e9ca 2300 	strd	r2, r3, [sl]
 80048f6:	4620      	mov	r0, r4
 80048f8:	4629      	mov	r1, r5
 80048fa:	f7fb fdb3 	bl	8000464 <__aeabi_dsub>
 80048fe:	a37e      	add	r3, pc, #504	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	e7e0      	b.n	80048c8 <__ieee754_rem_pio2+0xe8>
 8004906:	4b87      	ldr	r3, [pc, #540]	; (8004b24 <__ieee754_rem_pio2+0x344>)
 8004908:	4598      	cmp	r8, r3
 800490a:	f300 80d9 	bgt.w	8004ac0 <__ieee754_rem_pio2+0x2e0>
 800490e:	f000 fe49 	bl	80055a4 <fabs>
 8004912:	ec55 4b10 	vmov	r4, r5, d0
 8004916:	ee10 0a10 	vmov	r0, s0
 800491a:	a379      	add	r3, pc, #484	; (adr r3, 8004b00 <__ieee754_rem_pio2+0x320>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	4629      	mov	r1, r5
 8004922:	f7fb fc71 	bl	8000208 <__aeabi_dmul>
 8004926:	4b80      	ldr	r3, [pc, #512]	; (8004b28 <__ieee754_rem_pio2+0x348>)
 8004928:	2200      	movs	r2, #0
 800492a:	f7fb fd9d 	bl	8000468 <__adddf3>
 800492e:	f7fb ffd9 	bl	80008e4 <__aeabi_d2iz>
 8004932:	4683      	mov	fp, r0
 8004934:	f7fb fee4 	bl	8000700 <__aeabi_i2d>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	ec43 2b18 	vmov	d8, r2, r3
 8004940:	a367      	add	r3, pc, #412	; (adr r3, 8004ae0 <__ieee754_rem_pio2+0x300>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f7fb fc5f 	bl	8000208 <__aeabi_dmul>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f7fb fd87 	bl	8000464 <__aeabi_dsub>
 8004956:	a364      	add	r3, pc, #400	; (adr r3, 8004ae8 <__ieee754_rem_pio2+0x308>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	4606      	mov	r6, r0
 800495e:	460f      	mov	r7, r1
 8004960:	ec51 0b18 	vmov	r0, r1, d8
 8004964:	f7fb fc50 	bl	8000208 <__aeabi_dmul>
 8004968:	f1bb 0f1f 	cmp.w	fp, #31
 800496c:	4604      	mov	r4, r0
 800496e:	460d      	mov	r5, r1
 8004970:	dc0d      	bgt.n	800498e <__ieee754_rem_pio2+0x1ae>
 8004972:	4b6e      	ldr	r3, [pc, #440]	; (8004b2c <__ieee754_rem_pio2+0x34c>)
 8004974:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497c:	4543      	cmp	r3, r8
 800497e:	d006      	beq.n	800498e <__ieee754_rem_pio2+0x1ae>
 8004980:	4622      	mov	r2, r4
 8004982:	462b      	mov	r3, r5
 8004984:	4630      	mov	r0, r6
 8004986:	4639      	mov	r1, r7
 8004988:	f7fb fd6c 	bl	8000464 <__aeabi_dsub>
 800498c:	e00f      	b.n	80049ae <__ieee754_rem_pio2+0x1ce>
 800498e:	462b      	mov	r3, r5
 8004990:	4622      	mov	r2, r4
 8004992:	4630      	mov	r0, r6
 8004994:	4639      	mov	r1, r7
 8004996:	f7fb fd65 	bl	8000464 <__aeabi_dsub>
 800499a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800499e:	9303      	str	r3, [sp, #12]
 80049a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80049a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80049a8:	f1b8 0f10 	cmp.w	r8, #16
 80049ac:	dc02      	bgt.n	80049b4 <__ieee754_rem_pio2+0x1d4>
 80049ae:	e9ca 0100 	strd	r0, r1, [sl]
 80049b2:	e039      	b.n	8004a28 <__ieee754_rem_pio2+0x248>
 80049b4:	a34e      	add	r3, pc, #312	; (adr r3, 8004af0 <__ieee754_rem_pio2+0x310>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	ec51 0b18 	vmov	r0, r1, d8
 80049be:	f7fb fc23 	bl	8000208 <__aeabi_dmul>
 80049c2:	4604      	mov	r4, r0
 80049c4:	460d      	mov	r5, r1
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4630      	mov	r0, r6
 80049cc:	4639      	mov	r1, r7
 80049ce:	f7fb fd49 	bl	8000464 <__aeabi_dsub>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4680      	mov	r8, r0
 80049d8:	4689      	mov	r9, r1
 80049da:	4630      	mov	r0, r6
 80049dc:	4639      	mov	r1, r7
 80049de:	f7fb fd41 	bl	8000464 <__aeabi_dsub>
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	f7fb fd3d 	bl	8000464 <__aeabi_dsub>
 80049ea:	a343      	add	r3, pc, #268	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x318>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	4604      	mov	r4, r0
 80049f2:	460d      	mov	r5, r1
 80049f4:	ec51 0b18 	vmov	r0, r1, d8
 80049f8:	f7fb fc06 	bl	8000208 <__aeabi_dmul>
 80049fc:	4622      	mov	r2, r4
 80049fe:	462b      	mov	r3, r5
 8004a00:	f7fb fd30 	bl	8000464 <__aeabi_dsub>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4604      	mov	r4, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	4649      	mov	r1, r9
 8004a10:	f7fb fd28 	bl	8000464 <__aeabi_dsub>
 8004a14:	9a03      	ldr	r2, [sp, #12]
 8004a16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b31      	cmp	r3, #49	; 0x31
 8004a1e:	dc24      	bgt.n	8004a6a <__ieee754_rem_pio2+0x28a>
 8004a20:	e9ca 0100 	strd	r0, r1, [sl]
 8004a24:	4646      	mov	r6, r8
 8004a26:	464f      	mov	r7, r9
 8004a28:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4642      	mov	r2, r8
 8004a30:	464b      	mov	r3, r9
 8004a32:	4639      	mov	r1, r7
 8004a34:	f7fb fd16 	bl	8000464 <__aeabi_dsub>
 8004a38:	462b      	mov	r3, r5
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	f7fb fd12 	bl	8000464 <__aeabi_dsub>
 8004a40:	9b02      	ldr	r3, [sp, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004a48:	f6bf af0a 	bge.w	8004860 <__ieee754_rem_pio2+0x80>
 8004a4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004a50:	f8ca 3004 	str.w	r3, [sl, #4]
 8004a54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a58:	f8ca 8000 	str.w	r8, [sl]
 8004a5c:	f8ca 0008 	str.w	r0, [sl, #8]
 8004a60:	f8ca 300c 	str.w	r3, [sl, #12]
 8004a64:	f1cb 0b00 	rsb	fp, fp, #0
 8004a68:	e6fa      	b.n	8004860 <__ieee754_rem_pio2+0x80>
 8004a6a:	a327      	add	r3, pc, #156	; (adr r3, 8004b08 <__ieee754_rem_pio2+0x328>)
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	ec51 0b18 	vmov	r0, r1, d8
 8004a74:	f7fb fbc8 	bl	8000208 <__aeabi_dmul>
 8004a78:	4604      	mov	r4, r0
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4640      	mov	r0, r8
 8004a82:	4649      	mov	r1, r9
 8004a84:	f7fb fcee 	bl	8000464 <__aeabi_dsub>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	460f      	mov	r7, r1
 8004a90:	4640      	mov	r0, r8
 8004a92:	4649      	mov	r1, r9
 8004a94:	f7fb fce6 	bl	8000464 <__aeabi_dsub>
 8004a98:	4622      	mov	r2, r4
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	f7fb fce2 	bl	8000464 <__aeabi_dsub>
 8004aa0:	a31b      	add	r3, pc, #108	; (adr r3, 8004b10 <__ieee754_rem_pio2+0x330>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460d      	mov	r5, r1
 8004aaa:	ec51 0b18 	vmov	r0, r1, d8
 8004aae:	f7fb fbab 	bl	8000208 <__aeabi_dmul>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	f7fb fcd5 	bl	8000464 <__aeabi_dsub>
 8004aba:	4604      	mov	r4, r0
 8004abc:	460d      	mov	r5, r1
 8004abe:	e75f      	b.n	8004980 <__ieee754_rem_pio2+0x1a0>
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <__ieee754_rem_pio2+0x350>)
 8004ac2:	4598      	cmp	r8, r3
 8004ac4:	dd36      	ble.n	8004b34 <__ieee754_rem_pio2+0x354>
 8004ac6:	ee10 2a10 	vmov	r2, s0
 8004aca:	462b      	mov	r3, r5
 8004acc:	4620      	mov	r0, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7fb fcc8 	bl	8000464 <__aeabi_dsub>
 8004ad4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ad8:	e9ca 0100 	strd	r0, r1, [sl]
 8004adc:	e694      	b.n	8004808 <__ieee754_rem_pio2+0x28>
 8004ade:	bf00      	nop
 8004ae0:	54400000 	.word	0x54400000
 8004ae4:	3ff921fb 	.word	0x3ff921fb
 8004ae8:	1a626331 	.word	0x1a626331
 8004aec:	3dd0b461 	.word	0x3dd0b461
 8004af0:	1a600000 	.word	0x1a600000
 8004af4:	3dd0b461 	.word	0x3dd0b461
 8004af8:	2e037073 	.word	0x2e037073
 8004afc:	3ba3198a 	.word	0x3ba3198a
 8004b00:	6dc9c883 	.word	0x6dc9c883
 8004b04:	3fe45f30 	.word	0x3fe45f30
 8004b08:	2e000000 	.word	0x2e000000
 8004b0c:	3ba3198a 	.word	0x3ba3198a
 8004b10:	252049c1 	.word	0x252049c1
 8004b14:	397b839a 	.word	0x397b839a
 8004b18:	3fe921fb 	.word	0x3fe921fb
 8004b1c:	4002d97b 	.word	0x4002d97b
 8004b20:	3ff921fb 	.word	0x3ff921fb
 8004b24:	413921fb 	.word	0x413921fb
 8004b28:	3fe00000 	.word	0x3fe00000
 8004b2c:	080057f8 	.word	0x080057f8
 8004b30:	7fefffff 	.word	0x7fefffff
 8004b34:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004b38:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004b3c:	ee10 0a10 	vmov	r0, s0
 8004b40:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004b44:	ee10 6a10 	vmov	r6, s0
 8004b48:	460f      	mov	r7, r1
 8004b4a:	f7fb fecb 	bl	80008e4 <__aeabi_d2iz>
 8004b4e:	f7fb fdd7 	bl	8000700 <__aeabi_i2d>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4630      	mov	r0, r6
 8004b58:	4639      	mov	r1, r7
 8004b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b5e:	f7fb fc81 	bl	8000464 <__aeabi_dsub>
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <__ieee754_rem_pio2+0x410>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	f7fb fb4f 	bl	8000208 <__aeabi_dmul>
 8004b6a:	460f      	mov	r7, r1
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	f7fb feb9 	bl	80008e4 <__aeabi_d2iz>
 8004b72:	f7fb fdc5 	bl	8000700 <__aeabi_i2d>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b82:	f7fb fc6f 	bl	8000464 <__aeabi_dsub>
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <__ieee754_rem_pio2+0x410>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f7fb fb3d 	bl	8000208 <__aeabi_dmul>
 8004b8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b92:	ad04      	add	r5, sp, #16
 8004b94:	f04f 0803 	mov.w	r8, #3
 8004b98:	46a9      	mov	r9, r5
 8004b9a:	2600      	movs	r6, #0
 8004b9c:	2700      	movs	r7, #0
 8004b9e:	4632      	mov	r2, r6
 8004ba0:	463b      	mov	r3, r7
 8004ba2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004ba6:	46c3      	mov	fp, r8
 8004ba8:	3d08      	subs	r5, #8
 8004baa:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bae:	f7fb fe67 	bl	8000880 <__aeabi_dcmpeq>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d1f3      	bne.n	8004b9e <__ieee754_rem_pio2+0x3be>
 8004bb6:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <__ieee754_rem_pio2+0x414>)
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	2302      	movs	r3, #2
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	465b      	mov	r3, fp
 8004bc2:	4651      	mov	r1, sl
 8004bc4:	4648      	mov	r0, r9
 8004bc6:	f000 f8df 	bl	8004d88 <__kernel_rem_pio2>
 8004bca:	9b02      	ldr	r3, [sp, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	4683      	mov	fp, r0
 8004bd0:	f6bf ae46 	bge.w	8004860 <__ieee754_rem_pio2+0x80>
 8004bd4:	e9da 2100 	ldrd	r2, r1, [sl]
 8004bd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bdc:	e9ca 2300 	strd	r2, r3, [sl]
 8004be0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004be8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004bec:	e73a      	b.n	8004a64 <__ieee754_rem_pio2+0x284>
 8004bee:	bf00      	nop
 8004bf0:	41700000 	.word	0x41700000
 8004bf4:	08005878 	.word	0x08005878

08004bf8 <__kernel_cos>:
 8004bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	ec57 6b10 	vmov	r6, r7, d0
 8004c00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004c04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004c08:	ed8d 1b00 	vstr	d1, [sp]
 8004c0c:	da07      	bge.n	8004c1e <__kernel_cos+0x26>
 8004c0e:	ee10 0a10 	vmov	r0, s0
 8004c12:	4639      	mov	r1, r7
 8004c14:	f7fb fe66 	bl	80008e4 <__aeabi_d2iz>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	f000 8088 	beq.w	8004d2e <__kernel_cos+0x136>
 8004c1e:	4632      	mov	r2, r6
 8004c20:	463b      	mov	r3, r7
 8004c22:	4630      	mov	r0, r6
 8004c24:	4639      	mov	r1, r7
 8004c26:	f7fb faef 	bl	8000208 <__aeabi_dmul>
 8004c2a:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <__kernel_cos+0x178>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	460d      	mov	r5, r1
 8004c32:	f7fb fae9 	bl	8000208 <__aeabi_dmul>
 8004c36:	a340      	add	r3, pc, #256	; (adr r3, 8004d38 <__kernel_cos+0x140>)
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	4682      	mov	sl, r0
 8004c3e:	468b      	mov	fp, r1
 8004c40:	4620      	mov	r0, r4
 8004c42:	4629      	mov	r1, r5
 8004c44:	f7fb fae0 	bl	8000208 <__aeabi_dmul>
 8004c48:	a33d      	add	r3, pc, #244	; (adr r3, 8004d40 <__kernel_cos+0x148>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f7fb fc0b 	bl	8000468 <__adddf3>
 8004c52:	4622      	mov	r2, r4
 8004c54:	462b      	mov	r3, r5
 8004c56:	f7fb fad7 	bl	8000208 <__aeabi_dmul>
 8004c5a:	a33b      	add	r3, pc, #236	; (adr r3, 8004d48 <__kernel_cos+0x150>)
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb fc00 	bl	8000464 <__aeabi_dsub>
 8004c64:	4622      	mov	r2, r4
 8004c66:	462b      	mov	r3, r5
 8004c68:	f7fb face 	bl	8000208 <__aeabi_dmul>
 8004c6c:	a338      	add	r3, pc, #224	; (adr r3, 8004d50 <__kernel_cos+0x158>)
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f7fb fbf9 	bl	8000468 <__adddf3>
 8004c76:	4622      	mov	r2, r4
 8004c78:	462b      	mov	r3, r5
 8004c7a:	f7fb fac5 	bl	8000208 <__aeabi_dmul>
 8004c7e:	a336      	add	r3, pc, #216	; (adr r3, 8004d58 <__kernel_cos+0x160>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fbee 	bl	8000464 <__aeabi_dsub>
 8004c88:	4622      	mov	r2, r4
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	f7fb fabc 	bl	8000208 <__aeabi_dmul>
 8004c90:	a333      	add	r3, pc, #204	; (adr r3, 8004d60 <__kernel_cos+0x168>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fbe7 	bl	8000468 <__adddf3>
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	f7fb fab3 	bl	8000208 <__aeabi_dmul>
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	f7fb faaf 	bl	8000208 <__aeabi_dmul>
 8004caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cae:	4604      	mov	r4, r0
 8004cb0:	460d      	mov	r5, r1
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	4639      	mov	r1, r7
 8004cb6:	f7fb faa7 	bl	8000208 <__aeabi_dmul>
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7fb fbcf 	bl	8000464 <__aeabi_dsub>
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <__kernel_cos+0x17c>)
 8004cc8:	4598      	cmp	r8, r3
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460f      	mov	r7, r1
 8004cce:	dc10      	bgt.n	8004cf2 <__kernel_cos+0xfa>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	f7fb fbc4 	bl	8000464 <__aeabi_dsub>
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4926      	ldr	r1, [pc, #152]	; (8004d78 <__kernel_cos+0x180>)
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f7fb fbbe 	bl	8000464 <__aeabi_dsub>
 8004ce8:	ec41 0b10 	vmov	d0, r0, r1
 8004cec:	b003      	add	sp, #12
 8004cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <__kernel_cos+0x184>)
 8004cf4:	4920      	ldr	r1, [pc, #128]	; (8004d78 <__kernel_cos+0x180>)
 8004cf6:	4598      	cmp	r8, r3
 8004cf8:	bfcc      	ite	gt
 8004cfa:	4d21      	ldrgt	r5, [pc, #132]	; (8004d80 <__kernel_cos+0x188>)
 8004cfc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004d00:	2400      	movs	r4, #0
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	2000      	movs	r0, #0
 8004d08:	f7fb fbac 	bl	8000464 <__aeabi_dsub>
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	4680      	mov	r8, r0
 8004d10:	4689      	mov	r9, r1
 8004d12:	462b      	mov	r3, r5
 8004d14:	4650      	mov	r0, sl
 8004d16:	4659      	mov	r1, fp
 8004d18:	f7fb fba4 	bl	8000464 <__aeabi_dsub>
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	463b      	mov	r3, r7
 8004d20:	f7fb fba0 	bl	8000464 <__aeabi_dsub>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4640      	mov	r0, r8
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	e7da      	b.n	8004ce4 <__kernel_cos+0xec>
 8004d2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004d68 <__kernel_cos+0x170>
 8004d32:	e7db      	b.n	8004cec <__kernel_cos+0xf4>
 8004d34:	f3af 8000 	nop.w
 8004d38:	be8838d4 	.word	0xbe8838d4
 8004d3c:	bda8fae9 	.word	0xbda8fae9
 8004d40:	bdb4b1c4 	.word	0xbdb4b1c4
 8004d44:	3e21ee9e 	.word	0x3e21ee9e
 8004d48:	809c52ad 	.word	0x809c52ad
 8004d4c:	3e927e4f 	.word	0x3e927e4f
 8004d50:	19cb1590 	.word	0x19cb1590
 8004d54:	3efa01a0 	.word	0x3efa01a0
 8004d58:	16c15177 	.word	0x16c15177
 8004d5c:	3f56c16c 	.word	0x3f56c16c
 8004d60:	5555554c 	.word	0x5555554c
 8004d64:	3fa55555 	.word	0x3fa55555
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	3ff00000 	.word	0x3ff00000
 8004d70:	3fe00000 	.word	0x3fe00000
 8004d74:	3fd33332 	.word	0x3fd33332
 8004d78:	3ff00000 	.word	0x3ff00000
 8004d7c:	3fe90000 	.word	0x3fe90000
 8004d80:	3fd20000 	.word	0x3fd20000
 8004d84:	00000000 	.word	0x00000000

08004d88 <__kernel_rem_pio2>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	ed2d 8b02 	vpush	{d8}
 8004d90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004d94:	f112 0f14 	cmn.w	r2, #20
 8004d98:	9308      	str	r3, [sp, #32]
 8004d9a:	9101      	str	r1, [sp, #4]
 8004d9c:	4bc4      	ldr	r3, [pc, #784]	; (80050b0 <__kernel_rem_pio2+0x328>)
 8004d9e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004da0:	900b      	str	r0, [sp, #44]	; 0x2c
 8004da2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004da6:	9302      	str	r3, [sp, #8]
 8004da8:	9b08      	ldr	r3, [sp, #32]
 8004daa:	f103 33ff 	add.w	r3, r3, #4294967295
 8004dae:	bfa8      	it	ge
 8004db0:	1ed4      	subge	r4, r2, #3
 8004db2:	9306      	str	r3, [sp, #24]
 8004db4:	bfb2      	itee	lt
 8004db6:	2400      	movlt	r4, #0
 8004db8:	2318      	movge	r3, #24
 8004dba:	fb94 f4f3 	sdivge	r4, r4, r3
 8004dbe:	f06f 0317 	mvn.w	r3, #23
 8004dc2:	fb04 3303 	mla	r3, r4, r3, r3
 8004dc6:	eb03 0a02 	add.w	sl, r3, r2
 8004dca:	9b02      	ldr	r3, [sp, #8]
 8004dcc:	9a06      	ldr	r2, [sp, #24]
 8004dce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80050a0 <__kernel_rem_pio2+0x318>
 8004dd2:	eb03 0802 	add.w	r8, r3, r2
 8004dd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004dd8:	1aa7      	subs	r7, r4, r2
 8004dda:	ae22      	add	r6, sp, #136	; 0x88
 8004ddc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004de0:	2500      	movs	r5, #0
 8004de2:	4545      	cmp	r5, r8
 8004de4:	dd13      	ble.n	8004e0e <__kernel_rem_pio2+0x86>
 8004de6:	9b08      	ldr	r3, [sp, #32]
 8004de8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80050a0 <__kernel_rem_pio2+0x318>
 8004dec:	aa22      	add	r2, sp, #136	; 0x88
 8004dee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004df2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004df6:	f04f 0800 	mov.w	r8, #0
 8004dfa:	9b02      	ldr	r3, [sp, #8]
 8004dfc:	4598      	cmp	r8, r3
 8004dfe:	dc2f      	bgt.n	8004e60 <__kernel_rem_pio2+0xd8>
 8004e00:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004e04:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004e08:	462f      	mov	r7, r5
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	e01b      	b.n	8004e46 <__kernel_rem_pio2+0xbe>
 8004e0e:	42ef      	cmn	r7, r5
 8004e10:	d407      	bmi.n	8004e22 <__kernel_rem_pio2+0x9a>
 8004e12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004e16:	f7fb fc73 	bl	8000700 <__aeabi_i2d>
 8004e1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e1e:	3501      	adds	r5, #1
 8004e20:	e7df      	b.n	8004de2 <__kernel_rem_pio2+0x5a>
 8004e22:	ec51 0b18 	vmov	r0, r1, d8
 8004e26:	e7f8      	b.n	8004e1a <__kernel_rem_pio2+0x92>
 8004e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004e30:	f7fb f9ea 	bl	8000208 <__aeabi_dmul>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e3c:	f7fb fb14 	bl	8000468 <__adddf3>
 8004e40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e44:	3601      	adds	r6, #1
 8004e46:	9b06      	ldr	r3, [sp, #24]
 8004e48:	429e      	cmp	r6, r3
 8004e4a:	f1a7 0708 	sub.w	r7, r7, #8
 8004e4e:	ddeb      	ble.n	8004e28 <__kernel_rem_pio2+0xa0>
 8004e50:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004e54:	f108 0801 	add.w	r8, r8, #1
 8004e58:	ecab 7b02 	vstmia	fp!, {d7}
 8004e5c:	3508      	adds	r5, #8
 8004e5e:	e7cc      	b.n	8004dfa <__kernel_rem_pio2+0x72>
 8004e60:	9b02      	ldr	r3, [sp, #8]
 8004e62:	aa0e      	add	r2, sp, #56	; 0x38
 8004e64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e68:	930d      	str	r3, [sp, #52]	; 0x34
 8004e6a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004e6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004e70:	9c02      	ldr	r4, [sp, #8]
 8004e72:	930c      	str	r3, [sp, #48]	; 0x30
 8004e74:	00e3      	lsls	r3, r4, #3
 8004e76:	930a      	str	r3, [sp, #40]	; 0x28
 8004e78:	ab9a      	add	r3, sp, #616	; 0x268
 8004e7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e7e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004e82:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004e86:	ab72      	add	r3, sp, #456	; 0x1c8
 8004e88:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004e8c:	46c3      	mov	fp, r8
 8004e8e:	46a1      	mov	r9, r4
 8004e90:	f1b9 0f00 	cmp.w	r9, #0
 8004e94:	f1a5 0508 	sub.w	r5, r5, #8
 8004e98:	dc77      	bgt.n	8004f8a <__kernel_rem_pio2+0x202>
 8004e9a:	ec47 6b10 	vmov	d0, r6, r7
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f000 fc0a 	bl	80056b8 <scalbn>
 8004ea4:	ec57 6b10 	vmov	r6, r7, d0
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004eae:	ee10 0a10 	vmov	r0, s0
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	f7fb f9a8 	bl	8000208 <__aeabi_dmul>
 8004eb8:	ec41 0b10 	vmov	d0, r0, r1
 8004ebc:	f000 fb7c 	bl	80055b8 <floor>
 8004ec0:	4b7c      	ldr	r3, [pc, #496]	; (80050b4 <__kernel_rem_pio2+0x32c>)
 8004ec2:	ec51 0b10 	vmov	r0, r1, d0
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f7fb f99e 	bl	8000208 <__aeabi_dmul>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	f7fb fac6 	bl	8000464 <__aeabi_dsub>
 8004ed8:	460f      	mov	r7, r1
 8004eda:	4606      	mov	r6, r0
 8004edc:	f7fb fd02 	bl	80008e4 <__aeabi_d2iz>
 8004ee0:	9004      	str	r0, [sp, #16]
 8004ee2:	f7fb fc0d 	bl	8000700 <__aeabi_i2d>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4630      	mov	r0, r6
 8004eec:	4639      	mov	r1, r7
 8004eee:	f7fb fab9 	bl	8000464 <__aeabi_dsub>
 8004ef2:	f1ba 0f00 	cmp.w	sl, #0
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460f      	mov	r7, r1
 8004efa:	dd6d      	ble.n	8004fd8 <__kernel_rem_pio2+0x250>
 8004efc:	1e62      	subs	r2, r4, #1
 8004efe:	ab0e      	add	r3, sp, #56	; 0x38
 8004f00:	9d04      	ldr	r5, [sp, #16]
 8004f02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f06:	f1ca 0118 	rsb	r1, sl, #24
 8004f0a:	fa40 f301 	asr.w	r3, r0, r1
 8004f0e:	441d      	add	r5, r3
 8004f10:	408b      	lsls	r3, r1
 8004f12:	1ac0      	subs	r0, r0, r3
 8004f14:	ab0e      	add	r3, sp, #56	; 0x38
 8004f16:	9504      	str	r5, [sp, #16]
 8004f18:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004f1c:	f1ca 0317 	rsb	r3, sl, #23
 8004f20:	fa40 fb03 	asr.w	fp, r0, r3
 8004f24:	f1bb 0f00 	cmp.w	fp, #0
 8004f28:	dd65      	ble.n	8004ff6 <__kernel_rem_pio2+0x26e>
 8004f2a:	9b04      	ldr	r3, [sp, #16]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	3301      	adds	r3, #1
 8004f30:	9304      	str	r3, [sp, #16]
 8004f32:	4615      	mov	r5, r2
 8004f34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004f38:	4294      	cmp	r4, r2
 8004f3a:	f300 809c 	bgt.w	8005076 <__kernel_rem_pio2+0x2ee>
 8004f3e:	f1ba 0f00 	cmp.w	sl, #0
 8004f42:	dd07      	ble.n	8004f54 <__kernel_rem_pio2+0x1cc>
 8004f44:	f1ba 0f01 	cmp.w	sl, #1
 8004f48:	f000 80c0 	beq.w	80050cc <__kernel_rem_pio2+0x344>
 8004f4c:	f1ba 0f02 	cmp.w	sl, #2
 8004f50:	f000 80c6 	beq.w	80050e0 <__kernel_rem_pio2+0x358>
 8004f54:	f1bb 0f02 	cmp.w	fp, #2
 8004f58:	d14d      	bne.n	8004ff6 <__kernel_rem_pio2+0x26e>
 8004f5a:	4632      	mov	r2, r6
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	4956      	ldr	r1, [pc, #344]	; (80050b8 <__kernel_rem_pio2+0x330>)
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7fb fa7f 	bl	8000464 <__aeabi_dsub>
 8004f66:	4606      	mov	r6, r0
 8004f68:	460f      	mov	r7, r1
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	d043      	beq.n	8004ff6 <__kernel_rem_pio2+0x26e>
 8004f6e:	4650      	mov	r0, sl
 8004f70:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80050a8 <__kernel_rem_pio2+0x320>
 8004f74:	f000 fba0 	bl	80056b8 <scalbn>
 8004f78:	4630      	mov	r0, r6
 8004f7a:	4639      	mov	r1, r7
 8004f7c:	ec53 2b10 	vmov	r2, r3, d0
 8004f80:	f7fb fa70 	bl	8000464 <__aeabi_dsub>
 8004f84:	4606      	mov	r6, r0
 8004f86:	460f      	mov	r7, r1
 8004f88:	e035      	b.n	8004ff6 <__kernel_rem_pio2+0x26e>
 8004f8a:	4b4c      	ldr	r3, [pc, #304]	; (80050bc <__kernel_rem_pio2+0x334>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4639      	mov	r1, r7
 8004f92:	f7fb f939 	bl	8000208 <__aeabi_dmul>
 8004f96:	f7fb fca5 	bl	80008e4 <__aeabi_d2iz>
 8004f9a:	f7fb fbb1 	bl	8000700 <__aeabi_i2d>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	ec43 2b18 	vmov	d8, r2, r3
 8004fa6:	4b46      	ldr	r3, [pc, #280]	; (80050c0 <__kernel_rem_pio2+0x338>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f7fb f92d 	bl	8000208 <__aeabi_dmul>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	f7fb fa55 	bl	8000464 <__aeabi_dsub>
 8004fba:	f7fb fc93 	bl	80008e4 <__aeabi_d2iz>
 8004fbe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fc2:	f84b 0b04 	str.w	r0, [fp], #4
 8004fc6:	ec51 0b18 	vmov	r0, r1, d8
 8004fca:	f7fb fa4d 	bl	8000468 <__adddf3>
 8004fce:	f109 39ff 	add.w	r9, r9, #4294967295
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	460f      	mov	r7, r1
 8004fd6:	e75b      	b.n	8004e90 <__kernel_rem_pio2+0x108>
 8004fd8:	d106      	bne.n	8004fe8 <__kernel_rem_pio2+0x260>
 8004fda:	1e63      	subs	r3, r4, #1
 8004fdc:	aa0e      	add	r2, sp, #56	; 0x38
 8004fde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004fe2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8004fe6:	e79d      	b.n	8004f24 <__kernel_rem_pio2+0x19c>
 8004fe8:	4b36      	ldr	r3, [pc, #216]	; (80050c4 <__kernel_rem_pio2+0x33c>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	f7fb fc66 	bl	80008bc <__aeabi_dcmpge>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d13d      	bne.n	8005070 <__kernel_rem_pio2+0x2e8>
 8004ff4:	4683      	mov	fp, r0
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	4639      	mov	r1, r7
 8004ffe:	f7fb fc3f 	bl	8000880 <__aeabi_dcmpeq>
 8005002:	2800      	cmp	r0, #0
 8005004:	f000 80c0 	beq.w	8005188 <__kernel_rem_pio2+0x400>
 8005008:	1e65      	subs	r5, r4, #1
 800500a:	462b      	mov	r3, r5
 800500c:	2200      	movs	r2, #0
 800500e:	9902      	ldr	r1, [sp, #8]
 8005010:	428b      	cmp	r3, r1
 8005012:	da6c      	bge.n	80050ee <__kernel_rem_pio2+0x366>
 8005014:	2a00      	cmp	r2, #0
 8005016:	f000 8089 	beq.w	800512c <__kernel_rem_pio2+0x3a4>
 800501a:	ab0e      	add	r3, sp, #56	; 0x38
 800501c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005020:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80ad 	beq.w	8005184 <__kernel_rem_pio2+0x3fc>
 800502a:	4650      	mov	r0, sl
 800502c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80050a8 <__kernel_rem_pio2+0x320>
 8005030:	f000 fb42 	bl	80056b8 <scalbn>
 8005034:	ab9a      	add	r3, sp, #616	; 0x268
 8005036:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800503a:	ec57 6b10 	vmov	r6, r7, d0
 800503e:	00ec      	lsls	r4, r5, #3
 8005040:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005044:	46aa      	mov	sl, r5
 8005046:	f1ba 0f00 	cmp.w	sl, #0
 800504a:	f280 80d6 	bge.w	80051fa <__kernel_rem_pio2+0x472>
 800504e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80050a0 <__kernel_rem_pio2+0x318>
 8005052:	462e      	mov	r6, r5
 8005054:	2e00      	cmp	r6, #0
 8005056:	f2c0 8104 	blt.w	8005262 <__kernel_rem_pio2+0x4da>
 800505a:	ab72      	add	r3, sp, #456	; 0x1c8
 800505c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005060:	f8df a064 	ldr.w	sl, [pc, #100]	; 80050c8 <__kernel_rem_pio2+0x340>
 8005064:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005068:	f04f 0800 	mov.w	r8, #0
 800506c:	1baf      	subs	r7, r5, r6
 800506e:	e0ea      	b.n	8005246 <__kernel_rem_pio2+0x4be>
 8005070:	f04f 0b02 	mov.w	fp, #2
 8005074:	e759      	b.n	8004f2a <__kernel_rem_pio2+0x1a2>
 8005076:	f8d8 3000 	ldr.w	r3, [r8]
 800507a:	b955      	cbnz	r5, 8005092 <__kernel_rem_pio2+0x30a>
 800507c:	b123      	cbz	r3, 8005088 <__kernel_rem_pio2+0x300>
 800507e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005082:	f8c8 3000 	str.w	r3, [r8]
 8005086:	2301      	movs	r3, #1
 8005088:	3201      	adds	r2, #1
 800508a:	f108 0804 	add.w	r8, r8, #4
 800508e:	461d      	mov	r5, r3
 8005090:	e752      	b.n	8004f38 <__kernel_rem_pio2+0x1b0>
 8005092:	1acb      	subs	r3, r1, r3
 8005094:	f8c8 3000 	str.w	r3, [r8]
 8005098:	462b      	mov	r3, r5
 800509a:	e7f5      	b.n	8005088 <__kernel_rem_pio2+0x300>
 800509c:	f3af 8000 	nop.w
	...
 80050ac:	3ff00000 	.word	0x3ff00000
 80050b0:	080059c0 	.word	0x080059c0
 80050b4:	40200000 	.word	0x40200000
 80050b8:	3ff00000 	.word	0x3ff00000
 80050bc:	3e700000 	.word	0x3e700000
 80050c0:	41700000 	.word	0x41700000
 80050c4:	3fe00000 	.word	0x3fe00000
 80050c8:	08005980 	.word	0x08005980
 80050cc:	1e62      	subs	r2, r4, #1
 80050ce:	ab0e      	add	r3, sp, #56	; 0x38
 80050d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80050d8:	a90e      	add	r1, sp, #56	; 0x38
 80050da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80050de:	e739      	b.n	8004f54 <__kernel_rem_pio2+0x1cc>
 80050e0:	1e62      	subs	r2, r4, #1
 80050e2:	ab0e      	add	r3, sp, #56	; 0x38
 80050e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80050ec:	e7f4      	b.n	80050d8 <__kernel_rem_pio2+0x350>
 80050ee:	a90e      	add	r1, sp, #56	; 0x38
 80050f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	430a      	orrs	r2, r1
 80050f8:	e789      	b.n	800500e <__kernel_rem_pio2+0x286>
 80050fa:	3301      	adds	r3, #1
 80050fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005100:	2900      	cmp	r1, #0
 8005102:	d0fa      	beq.n	80050fa <__kernel_rem_pio2+0x372>
 8005104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005106:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800510a:	446a      	add	r2, sp
 800510c:	3a98      	subs	r2, #152	; 0x98
 800510e:	920a      	str	r2, [sp, #40]	; 0x28
 8005110:	9a08      	ldr	r2, [sp, #32]
 8005112:	18e3      	adds	r3, r4, r3
 8005114:	18a5      	adds	r5, r4, r2
 8005116:	aa22      	add	r2, sp, #136	; 0x88
 8005118:	f104 0801 	add.w	r8, r4, #1
 800511c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005120:	9304      	str	r3, [sp, #16]
 8005122:	9b04      	ldr	r3, [sp, #16]
 8005124:	4543      	cmp	r3, r8
 8005126:	da04      	bge.n	8005132 <__kernel_rem_pio2+0x3aa>
 8005128:	461c      	mov	r4, r3
 800512a:	e6a3      	b.n	8004e74 <__kernel_rem_pio2+0xec>
 800512c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800512e:	2301      	movs	r3, #1
 8005130:	e7e4      	b.n	80050fc <__kernel_rem_pio2+0x374>
 8005132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005134:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005138:	f7fb fae2 	bl	8000700 <__aeabi_i2d>
 800513c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005142:	46ab      	mov	fp, r5
 8005144:	461c      	mov	r4, r3
 8005146:	f04f 0900 	mov.w	r9, #0
 800514a:	2600      	movs	r6, #0
 800514c:	2700      	movs	r7, #0
 800514e:	9b06      	ldr	r3, [sp, #24]
 8005150:	4599      	cmp	r9, r3
 8005152:	dd06      	ble.n	8005162 <__kernel_rem_pio2+0x3da>
 8005154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005156:	e8e3 6702 	strd	r6, r7, [r3], #8
 800515a:	f108 0801 	add.w	r8, r8, #1
 800515e:	930a      	str	r3, [sp, #40]	; 0x28
 8005160:	e7df      	b.n	8005122 <__kernel_rem_pio2+0x39a>
 8005162:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005166:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800516a:	f7fb f84d 	bl	8000208 <__aeabi_dmul>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4630      	mov	r0, r6
 8005174:	4639      	mov	r1, r7
 8005176:	f7fb f977 	bl	8000468 <__adddf3>
 800517a:	f109 0901 	add.w	r9, r9, #1
 800517e:	4606      	mov	r6, r0
 8005180:	460f      	mov	r7, r1
 8005182:	e7e4      	b.n	800514e <__kernel_rem_pio2+0x3c6>
 8005184:	3d01      	subs	r5, #1
 8005186:	e748      	b.n	800501a <__kernel_rem_pio2+0x292>
 8005188:	ec47 6b10 	vmov	d0, r6, r7
 800518c:	f1ca 0000 	rsb	r0, sl, #0
 8005190:	f000 fa92 	bl	80056b8 <scalbn>
 8005194:	ec57 6b10 	vmov	r6, r7, d0
 8005198:	4ba0      	ldr	r3, [pc, #640]	; (800541c <__kernel_rem_pio2+0x694>)
 800519a:	ee10 0a10 	vmov	r0, s0
 800519e:	2200      	movs	r2, #0
 80051a0:	4639      	mov	r1, r7
 80051a2:	f7fb fb8b 	bl	80008bc <__aeabi_dcmpge>
 80051a6:	b1f8      	cbz	r0, 80051e8 <__kernel_rem_pio2+0x460>
 80051a8:	4b9d      	ldr	r3, [pc, #628]	; (8005420 <__kernel_rem_pio2+0x698>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	4630      	mov	r0, r6
 80051ae:	4639      	mov	r1, r7
 80051b0:	f7fb f82a 	bl	8000208 <__aeabi_dmul>
 80051b4:	f7fb fb96 	bl	80008e4 <__aeabi_d2iz>
 80051b8:	4680      	mov	r8, r0
 80051ba:	f7fb faa1 	bl	8000700 <__aeabi_i2d>
 80051be:	4b97      	ldr	r3, [pc, #604]	; (800541c <__kernel_rem_pio2+0x694>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	f7fb f821 	bl	8000208 <__aeabi_dmul>
 80051c6:	460b      	mov	r3, r1
 80051c8:	4602      	mov	r2, r0
 80051ca:	4639      	mov	r1, r7
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7fb f949 	bl	8000464 <__aeabi_dsub>
 80051d2:	f7fb fb87 	bl	80008e4 <__aeabi_d2iz>
 80051d6:	1c65      	adds	r5, r4, #1
 80051d8:	ab0e      	add	r3, sp, #56	; 0x38
 80051da:	f10a 0a18 	add.w	sl, sl, #24
 80051de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051e2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80051e6:	e720      	b.n	800502a <__kernel_rem_pio2+0x2a2>
 80051e8:	4630      	mov	r0, r6
 80051ea:	4639      	mov	r1, r7
 80051ec:	f7fb fb7a 	bl	80008e4 <__aeabi_d2iz>
 80051f0:	ab0e      	add	r3, sp, #56	; 0x38
 80051f2:	4625      	mov	r5, r4
 80051f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051f8:	e717      	b.n	800502a <__kernel_rem_pio2+0x2a2>
 80051fa:	ab0e      	add	r3, sp, #56	; 0x38
 80051fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005200:	f7fb fa7e 	bl	8000700 <__aeabi_i2d>
 8005204:	4632      	mov	r2, r6
 8005206:	463b      	mov	r3, r7
 8005208:	f7fa fffe 	bl	8000208 <__aeabi_dmul>
 800520c:	4b84      	ldr	r3, [pc, #528]	; (8005420 <__kernel_rem_pio2+0x698>)
 800520e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005212:	2200      	movs	r2, #0
 8005214:	4630      	mov	r0, r6
 8005216:	4639      	mov	r1, r7
 8005218:	f7fa fff6 	bl	8000208 <__aeabi_dmul>
 800521c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005220:	4606      	mov	r6, r0
 8005222:	460f      	mov	r7, r1
 8005224:	e70f      	b.n	8005046 <__kernel_rem_pio2+0x2be>
 8005226:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800522a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800522e:	f7fa ffeb 	bl	8000208 <__aeabi_dmul>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800523a:	f7fb f915 	bl	8000468 <__adddf3>
 800523e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005242:	f108 0801 	add.w	r8, r8, #1
 8005246:	9b02      	ldr	r3, [sp, #8]
 8005248:	4598      	cmp	r8, r3
 800524a:	dc01      	bgt.n	8005250 <__kernel_rem_pio2+0x4c8>
 800524c:	45b8      	cmp	r8, r7
 800524e:	ddea      	ble.n	8005226 <__kernel_rem_pio2+0x49e>
 8005250:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005254:	ab4a      	add	r3, sp, #296	; 0x128
 8005256:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800525a:	ed87 7b00 	vstr	d7, [r7]
 800525e:	3e01      	subs	r6, #1
 8005260:	e6f8      	b.n	8005054 <__kernel_rem_pio2+0x2cc>
 8005262:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005264:	2b02      	cmp	r3, #2
 8005266:	dc0b      	bgt.n	8005280 <__kernel_rem_pio2+0x4f8>
 8005268:	2b00      	cmp	r3, #0
 800526a:	dc35      	bgt.n	80052d8 <__kernel_rem_pio2+0x550>
 800526c:	d059      	beq.n	8005322 <__kernel_rem_pio2+0x59a>
 800526e:	9b04      	ldr	r3, [sp, #16]
 8005270:	f003 0007 	and.w	r0, r3, #7
 8005274:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005278:	ecbd 8b02 	vpop	{d8}
 800527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005280:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005282:	2b03      	cmp	r3, #3
 8005284:	d1f3      	bne.n	800526e <__kernel_rem_pio2+0x4e6>
 8005286:	ab4a      	add	r3, sp, #296	; 0x128
 8005288:	4423      	add	r3, r4
 800528a:	9306      	str	r3, [sp, #24]
 800528c:	461c      	mov	r4, r3
 800528e:	469a      	mov	sl, r3
 8005290:	9502      	str	r5, [sp, #8]
 8005292:	9b02      	ldr	r3, [sp, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f1aa 0a08 	sub.w	sl, sl, #8
 800529a:	dc6b      	bgt.n	8005374 <__kernel_rem_pio2+0x5ec>
 800529c:	46aa      	mov	sl, r5
 800529e:	f1ba 0f01 	cmp.w	sl, #1
 80052a2:	f1a4 0408 	sub.w	r4, r4, #8
 80052a6:	f300 8085 	bgt.w	80053b4 <__kernel_rem_pio2+0x62c>
 80052aa:	9c06      	ldr	r4, [sp, #24]
 80052ac:	2000      	movs	r0, #0
 80052ae:	3408      	adds	r4, #8
 80052b0:	2100      	movs	r1, #0
 80052b2:	2d01      	cmp	r5, #1
 80052b4:	f300 809d 	bgt.w	80053f2 <__kernel_rem_pio2+0x66a>
 80052b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80052bc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80052c0:	f1bb 0f00 	cmp.w	fp, #0
 80052c4:	f040 809b 	bne.w	80053fe <__kernel_rem_pio2+0x676>
 80052c8:	9b01      	ldr	r3, [sp, #4]
 80052ca:	e9c3 5600 	strd	r5, r6, [r3]
 80052ce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80052d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80052d6:	e7ca      	b.n	800526e <__kernel_rem_pio2+0x4e6>
 80052d8:	3408      	adds	r4, #8
 80052da:	ab4a      	add	r3, sp, #296	; 0x128
 80052dc:	441c      	add	r4, r3
 80052de:	462e      	mov	r6, r5
 80052e0:	2000      	movs	r0, #0
 80052e2:	2100      	movs	r1, #0
 80052e4:	2e00      	cmp	r6, #0
 80052e6:	da36      	bge.n	8005356 <__kernel_rem_pio2+0x5ce>
 80052e8:	f1bb 0f00 	cmp.w	fp, #0
 80052ec:	d039      	beq.n	8005362 <__kernel_rem_pio2+0x5da>
 80052ee:	4602      	mov	r2, r0
 80052f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052f4:	9c01      	ldr	r4, [sp, #4]
 80052f6:	e9c4 2300 	strd	r2, r3, [r4]
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005302:	f7fb f8af 	bl	8000464 <__aeabi_dsub>
 8005306:	ae4c      	add	r6, sp, #304	; 0x130
 8005308:	2401      	movs	r4, #1
 800530a:	42a5      	cmp	r5, r4
 800530c:	da2c      	bge.n	8005368 <__kernel_rem_pio2+0x5e0>
 800530e:	f1bb 0f00 	cmp.w	fp, #0
 8005312:	d002      	beq.n	800531a <__kernel_rem_pio2+0x592>
 8005314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005318:	4619      	mov	r1, r3
 800531a:	9b01      	ldr	r3, [sp, #4]
 800531c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005320:	e7a5      	b.n	800526e <__kernel_rem_pio2+0x4e6>
 8005322:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005326:	eb0d 0403 	add.w	r4, sp, r3
 800532a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800532e:	2000      	movs	r0, #0
 8005330:	2100      	movs	r1, #0
 8005332:	2d00      	cmp	r5, #0
 8005334:	da09      	bge.n	800534a <__kernel_rem_pio2+0x5c2>
 8005336:	f1bb 0f00 	cmp.w	fp, #0
 800533a:	d002      	beq.n	8005342 <__kernel_rem_pio2+0x5ba>
 800533c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005340:	4619      	mov	r1, r3
 8005342:	9b01      	ldr	r3, [sp, #4]
 8005344:	e9c3 0100 	strd	r0, r1, [r3]
 8005348:	e791      	b.n	800526e <__kernel_rem_pio2+0x4e6>
 800534a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800534e:	f7fb f88b 	bl	8000468 <__adddf3>
 8005352:	3d01      	subs	r5, #1
 8005354:	e7ed      	b.n	8005332 <__kernel_rem_pio2+0x5aa>
 8005356:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800535a:	f7fb f885 	bl	8000468 <__adddf3>
 800535e:	3e01      	subs	r6, #1
 8005360:	e7c0      	b.n	80052e4 <__kernel_rem_pio2+0x55c>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	e7c5      	b.n	80052f4 <__kernel_rem_pio2+0x56c>
 8005368:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800536c:	f7fb f87c 	bl	8000468 <__adddf3>
 8005370:	3401      	adds	r4, #1
 8005372:	e7ca      	b.n	800530a <__kernel_rem_pio2+0x582>
 8005374:	e9da 8900 	ldrd	r8, r9, [sl]
 8005378:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800537c:	9b02      	ldr	r3, [sp, #8]
 800537e:	3b01      	subs	r3, #1
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	4632      	mov	r2, r6
 8005384:	463b      	mov	r3, r7
 8005386:	4640      	mov	r0, r8
 8005388:	4649      	mov	r1, r9
 800538a:	f7fb f86d 	bl	8000468 <__adddf3>
 800538e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4640      	mov	r0, r8
 8005398:	4649      	mov	r1, r9
 800539a:	f7fb f863 	bl	8000464 <__aeabi_dsub>
 800539e:	4632      	mov	r2, r6
 80053a0:	463b      	mov	r3, r7
 80053a2:	f7fb f861 	bl	8000468 <__adddf3>
 80053a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80053aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053ae:	ed8a 7b00 	vstr	d7, [sl]
 80053b2:	e76e      	b.n	8005292 <__kernel_rem_pio2+0x50a>
 80053b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80053b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80053bc:	4640      	mov	r0, r8
 80053be:	4632      	mov	r2, r6
 80053c0:	463b      	mov	r3, r7
 80053c2:	4649      	mov	r1, r9
 80053c4:	f7fb f850 	bl	8000468 <__adddf3>
 80053c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4640      	mov	r0, r8
 80053d2:	4649      	mov	r1, r9
 80053d4:	f7fb f846 	bl	8000464 <__aeabi_dsub>
 80053d8:	4632      	mov	r2, r6
 80053da:	463b      	mov	r3, r7
 80053dc:	f7fb f844 	bl	8000468 <__adddf3>
 80053e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053e8:	ed84 7b00 	vstr	d7, [r4]
 80053ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053f0:	e755      	b.n	800529e <__kernel_rem_pio2+0x516>
 80053f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80053f6:	f7fb f837 	bl	8000468 <__adddf3>
 80053fa:	3d01      	subs	r5, #1
 80053fc:	e759      	b.n	80052b2 <__kernel_rem_pio2+0x52a>
 80053fe:	9b01      	ldr	r3, [sp, #4]
 8005400:	9a01      	ldr	r2, [sp, #4]
 8005402:	601d      	str	r5, [r3, #0]
 8005404:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005408:	605c      	str	r4, [r3, #4]
 800540a:	609f      	str	r7, [r3, #8]
 800540c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005410:	60d3      	str	r3, [r2, #12]
 8005412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005416:	6110      	str	r0, [r2, #16]
 8005418:	6153      	str	r3, [r2, #20]
 800541a:	e728      	b.n	800526e <__kernel_rem_pio2+0x4e6>
 800541c:	41700000 	.word	0x41700000
 8005420:	3e700000 	.word	0x3e700000
 8005424:	00000000 	.word	0x00000000

08005428 <__kernel_sin>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	ed2d 8b04 	vpush	{d8-d9}
 8005430:	eeb0 8a41 	vmov.f32	s16, s2
 8005434:	eef0 8a61 	vmov.f32	s17, s3
 8005438:	ec55 4b10 	vmov	r4, r5, d0
 800543c:	b083      	sub	sp, #12
 800543e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005442:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005446:	9001      	str	r0, [sp, #4]
 8005448:	da06      	bge.n	8005458 <__kernel_sin+0x30>
 800544a:	ee10 0a10 	vmov	r0, s0
 800544e:	4629      	mov	r1, r5
 8005450:	f7fb fa48 	bl	80008e4 <__aeabi_d2iz>
 8005454:	2800      	cmp	r0, #0
 8005456:	d051      	beq.n	80054fc <__kernel_sin+0xd4>
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	4620      	mov	r0, r4
 800545e:	4629      	mov	r1, r5
 8005460:	f7fa fed2 	bl	8000208 <__aeabi_dmul>
 8005464:	4682      	mov	sl, r0
 8005466:	468b      	mov	fp, r1
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4620      	mov	r0, r4
 800546e:	4629      	mov	r1, r5
 8005470:	f7fa feca 	bl	8000208 <__aeabi_dmul>
 8005474:	a341      	add	r3, pc, #260	; (adr r3, 800557c <__kernel_sin+0x154>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	4680      	mov	r8, r0
 800547c:	4689      	mov	r9, r1
 800547e:	4650      	mov	r0, sl
 8005480:	4659      	mov	r1, fp
 8005482:	f7fa fec1 	bl	8000208 <__aeabi_dmul>
 8005486:	a33f      	add	r3, pc, #252	; (adr r3, 8005584 <__kernel_sin+0x15c>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f7fa ffea 	bl	8000464 <__aeabi_dsub>
 8005490:	4652      	mov	r2, sl
 8005492:	465b      	mov	r3, fp
 8005494:	f7fa feb8 	bl	8000208 <__aeabi_dmul>
 8005498:	a33c      	add	r3, pc, #240	; (adr r3, 800558c <__kernel_sin+0x164>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fa ffe3 	bl	8000468 <__adddf3>
 80054a2:	4652      	mov	r2, sl
 80054a4:	465b      	mov	r3, fp
 80054a6:	f7fa feaf 	bl	8000208 <__aeabi_dmul>
 80054aa:	a33a      	add	r3, pc, #232	; (adr r3, 8005594 <__kernel_sin+0x16c>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fa ffd8 	bl	8000464 <__aeabi_dsub>
 80054b4:	4652      	mov	r2, sl
 80054b6:	465b      	mov	r3, fp
 80054b8:	f7fa fea6 	bl	8000208 <__aeabi_dmul>
 80054bc:	a337      	add	r3, pc, #220	; (adr r3, 800559c <__kernel_sin+0x174>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f7fa ffd1 	bl	8000468 <__adddf3>
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	4606      	mov	r6, r0
 80054ca:	460f      	mov	r7, r1
 80054cc:	b9eb      	cbnz	r3, 800550a <__kernel_sin+0xe2>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4650      	mov	r0, sl
 80054d4:	4659      	mov	r1, fp
 80054d6:	f7fa fe97 	bl	8000208 <__aeabi_dmul>
 80054da:	a325      	add	r3, pc, #148	; (adr r3, 8005570 <__kernel_sin+0x148>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f7fa ffc0 	bl	8000464 <__aeabi_dsub>
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	f7fa fe8e 	bl	8000208 <__aeabi_dmul>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4620      	mov	r0, r4
 80054f2:	4629      	mov	r1, r5
 80054f4:	f7fa ffb8 	bl	8000468 <__adddf3>
 80054f8:	4604      	mov	r4, r0
 80054fa:	460d      	mov	r5, r1
 80054fc:	ec45 4b10 	vmov	d0, r4, r5
 8005500:	b003      	add	sp, #12
 8005502:	ecbd 8b04 	vpop	{d8-d9}
 8005506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <__kernel_sin+0x150>)
 800550c:	ec51 0b18 	vmov	r0, r1, d8
 8005510:	2200      	movs	r2, #0
 8005512:	f7fa fe79 	bl	8000208 <__aeabi_dmul>
 8005516:	4632      	mov	r2, r6
 8005518:	ec41 0b19 	vmov	d9, r0, r1
 800551c:	463b      	mov	r3, r7
 800551e:	4640      	mov	r0, r8
 8005520:	4649      	mov	r1, r9
 8005522:	f7fa fe71 	bl	8000208 <__aeabi_dmul>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	ec51 0b19 	vmov	r0, r1, d9
 800552e:	f7fa ff99 	bl	8000464 <__aeabi_dsub>
 8005532:	4652      	mov	r2, sl
 8005534:	465b      	mov	r3, fp
 8005536:	f7fa fe67 	bl	8000208 <__aeabi_dmul>
 800553a:	ec53 2b18 	vmov	r2, r3, d8
 800553e:	f7fa ff91 	bl	8000464 <__aeabi_dsub>
 8005542:	a30b      	add	r3, pc, #44	; (adr r3, 8005570 <__kernel_sin+0x148>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	4606      	mov	r6, r0
 800554a:	460f      	mov	r7, r1
 800554c:	4640      	mov	r0, r8
 800554e:	4649      	mov	r1, r9
 8005550:	f7fa fe5a 	bl	8000208 <__aeabi_dmul>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4630      	mov	r0, r6
 800555a:	4639      	mov	r1, r7
 800555c:	f7fa ff84 	bl	8000468 <__adddf3>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4620      	mov	r0, r4
 8005566:	4629      	mov	r1, r5
 8005568:	f7fa ff7c 	bl	8000464 <__aeabi_dsub>
 800556c:	e7c4      	b.n	80054f8 <__kernel_sin+0xd0>
 800556e:	bf00      	nop
 8005570:	55555549 	.word	0x55555549
 8005574:	3fc55555 	.word	0x3fc55555
 8005578:	3fe00000 	.word	0x3fe00000
 800557c:	5acfd57c 	.word	0x5acfd57c
 8005580:	3de5d93a 	.word	0x3de5d93a
 8005584:	8a2b9ceb 	.word	0x8a2b9ceb
 8005588:	3e5ae5e6 	.word	0x3e5ae5e6
 800558c:	57b1fe7d 	.word	0x57b1fe7d
 8005590:	3ec71de3 	.word	0x3ec71de3
 8005594:	19c161d5 	.word	0x19c161d5
 8005598:	3f2a01a0 	.word	0x3f2a01a0
 800559c:	1110f8a6 	.word	0x1110f8a6
 80055a0:	3f811111 	.word	0x3f811111

080055a4 <fabs>:
 80055a4:	ec51 0b10 	vmov	r0, r1, d0
 80055a8:	ee10 2a10 	vmov	r2, s0
 80055ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055b0:	ec43 2b10 	vmov	d0, r2, r3
 80055b4:	4770      	bx	lr
	...

080055b8 <floor>:
 80055b8:	ec51 0b10 	vmov	r0, r1, d0
 80055bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80055c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80055c8:	2e13      	cmp	r6, #19
 80055ca:	ee10 5a10 	vmov	r5, s0
 80055ce:	ee10 8a10 	vmov	r8, s0
 80055d2:	460c      	mov	r4, r1
 80055d4:	dc32      	bgt.n	800563c <floor+0x84>
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	da14      	bge.n	8005604 <floor+0x4c>
 80055da:	a333      	add	r3, pc, #204	; (adr r3, 80056a8 <floor+0xf0>)
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fa ff42 	bl	8000468 <__adddf3>
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	f7fb f972 	bl	80008d0 <__aeabi_dcmpgt>
 80055ec:	b138      	cbz	r0, 80055fe <floor+0x46>
 80055ee:	2c00      	cmp	r4, #0
 80055f0:	da57      	bge.n	80056a2 <floor+0xea>
 80055f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80055f6:	431d      	orrs	r5, r3
 80055f8:	d001      	beq.n	80055fe <floor+0x46>
 80055fa:	4c2d      	ldr	r4, [pc, #180]	; (80056b0 <floor+0xf8>)
 80055fc:	2500      	movs	r5, #0
 80055fe:	4621      	mov	r1, r4
 8005600:	4628      	mov	r0, r5
 8005602:	e025      	b.n	8005650 <floor+0x98>
 8005604:	4f2b      	ldr	r7, [pc, #172]	; (80056b4 <floor+0xfc>)
 8005606:	4137      	asrs	r7, r6
 8005608:	ea01 0307 	and.w	r3, r1, r7
 800560c:	4303      	orrs	r3, r0
 800560e:	d01f      	beq.n	8005650 <floor+0x98>
 8005610:	a325      	add	r3, pc, #148	; (adr r3, 80056a8 <floor+0xf0>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fa ff27 	bl	8000468 <__adddf3>
 800561a:	2200      	movs	r2, #0
 800561c:	2300      	movs	r3, #0
 800561e:	f7fb f957 	bl	80008d0 <__aeabi_dcmpgt>
 8005622:	2800      	cmp	r0, #0
 8005624:	d0eb      	beq.n	80055fe <floor+0x46>
 8005626:	2c00      	cmp	r4, #0
 8005628:	bfbe      	ittt	lt
 800562a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800562e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005632:	19a4      	addlt	r4, r4, r6
 8005634:	ea24 0407 	bic.w	r4, r4, r7
 8005638:	2500      	movs	r5, #0
 800563a:	e7e0      	b.n	80055fe <floor+0x46>
 800563c:	2e33      	cmp	r6, #51	; 0x33
 800563e:	dd0b      	ble.n	8005658 <floor+0xa0>
 8005640:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005644:	d104      	bne.n	8005650 <floor+0x98>
 8005646:	ee10 2a10 	vmov	r2, s0
 800564a:	460b      	mov	r3, r1
 800564c:	f7fa ff0c 	bl	8000468 <__adddf3>
 8005650:	ec41 0b10 	vmov	d0, r0, r1
 8005654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005658:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800565c:	f04f 33ff 	mov.w	r3, #4294967295
 8005660:	fa23 f707 	lsr.w	r7, r3, r7
 8005664:	4207      	tst	r7, r0
 8005666:	d0f3      	beq.n	8005650 <floor+0x98>
 8005668:	a30f      	add	r3, pc, #60	; (adr r3, 80056a8 <floor+0xf0>)
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f7fa fefb 	bl	8000468 <__adddf3>
 8005672:	2200      	movs	r2, #0
 8005674:	2300      	movs	r3, #0
 8005676:	f7fb f92b 	bl	80008d0 <__aeabi_dcmpgt>
 800567a:	2800      	cmp	r0, #0
 800567c:	d0bf      	beq.n	80055fe <floor+0x46>
 800567e:	2c00      	cmp	r4, #0
 8005680:	da02      	bge.n	8005688 <floor+0xd0>
 8005682:	2e14      	cmp	r6, #20
 8005684:	d103      	bne.n	800568e <floor+0xd6>
 8005686:	3401      	adds	r4, #1
 8005688:	ea25 0507 	bic.w	r5, r5, r7
 800568c:	e7b7      	b.n	80055fe <floor+0x46>
 800568e:	2301      	movs	r3, #1
 8005690:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005694:	fa03 f606 	lsl.w	r6, r3, r6
 8005698:	4435      	add	r5, r6
 800569a:	4545      	cmp	r5, r8
 800569c:	bf38      	it	cc
 800569e:	18e4      	addcc	r4, r4, r3
 80056a0:	e7f2      	b.n	8005688 <floor+0xd0>
 80056a2:	2500      	movs	r5, #0
 80056a4:	462c      	mov	r4, r5
 80056a6:	e7aa      	b.n	80055fe <floor+0x46>
 80056a8:	8800759c 	.word	0x8800759c
 80056ac:	7e37e43c 	.word	0x7e37e43c
 80056b0:	bff00000 	.word	0xbff00000
 80056b4:	000fffff 	.word	0x000fffff

080056b8 <scalbn>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	ec55 4b10 	vmov	r4, r5, d0
 80056be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80056c2:	4606      	mov	r6, r0
 80056c4:	462b      	mov	r3, r5
 80056c6:	b99a      	cbnz	r2, 80056f0 <scalbn+0x38>
 80056c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80056cc:	4323      	orrs	r3, r4
 80056ce:	d036      	beq.n	800573e <scalbn+0x86>
 80056d0:	4b39      	ldr	r3, [pc, #228]	; (80057b8 <scalbn+0x100>)
 80056d2:	4629      	mov	r1, r5
 80056d4:	ee10 0a10 	vmov	r0, s0
 80056d8:	2200      	movs	r2, #0
 80056da:	f7fa fd95 	bl	8000208 <__aeabi_dmul>
 80056de:	4b37      	ldr	r3, [pc, #220]	; (80057bc <scalbn+0x104>)
 80056e0:	429e      	cmp	r6, r3
 80056e2:	4604      	mov	r4, r0
 80056e4:	460d      	mov	r5, r1
 80056e6:	da10      	bge.n	800570a <scalbn+0x52>
 80056e8:	a32b      	add	r3, pc, #172	; (adr r3, 8005798 <scalbn+0xe0>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	e03a      	b.n	8005766 <scalbn+0xae>
 80056f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80056f4:	428a      	cmp	r2, r1
 80056f6:	d10c      	bne.n	8005712 <scalbn+0x5a>
 80056f8:	ee10 2a10 	vmov	r2, s0
 80056fc:	4620      	mov	r0, r4
 80056fe:	4629      	mov	r1, r5
 8005700:	f7fa feb2 	bl	8000468 <__adddf3>
 8005704:	4604      	mov	r4, r0
 8005706:	460d      	mov	r5, r1
 8005708:	e019      	b.n	800573e <scalbn+0x86>
 800570a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800570e:	460b      	mov	r3, r1
 8005710:	3a36      	subs	r2, #54	; 0x36
 8005712:	4432      	add	r2, r6
 8005714:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005718:	428a      	cmp	r2, r1
 800571a:	dd08      	ble.n	800572e <scalbn+0x76>
 800571c:	2d00      	cmp	r5, #0
 800571e:	a120      	add	r1, pc, #128	; (adr r1, 80057a0 <scalbn+0xe8>)
 8005720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005724:	da1c      	bge.n	8005760 <scalbn+0xa8>
 8005726:	a120      	add	r1, pc, #128	; (adr r1, 80057a8 <scalbn+0xf0>)
 8005728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800572c:	e018      	b.n	8005760 <scalbn+0xa8>
 800572e:	2a00      	cmp	r2, #0
 8005730:	dd08      	ble.n	8005744 <scalbn+0x8c>
 8005732:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005736:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800573a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800573e:	ec45 4b10 	vmov	d0, r4, r5
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005748:	da19      	bge.n	800577e <scalbn+0xc6>
 800574a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800574e:	429e      	cmp	r6, r3
 8005750:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005754:	dd0a      	ble.n	800576c <scalbn+0xb4>
 8005756:	a112      	add	r1, pc, #72	; (adr r1, 80057a0 <scalbn+0xe8>)
 8005758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e2      	bne.n	8005726 <scalbn+0x6e>
 8005760:	a30f      	add	r3, pc, #60	; (adr r3, 80057a0 <scalbn+0xe8>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fa fd4f 	bl	8000208 <__aeabi_dmul>
 800576a:	e7cb      	b.n	8005704 <scalbn+0x4c>
 800576c:	a10a      	add	r1, pc, #40	; (adr r1, 8005798 <scalbn+0xe0>)
 800576e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0b8      	beq.n	80056e8 <scalbn+0x30>
 8005776:	a10e      	add	r1, pc, #56	; (adr r1, 80057b0 <scalbn+0xf8>)
 8005778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800577c:	e7b4      	b.n	80056e8 <scalbn+0x30>
 800577e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005782:	3236      	adds	r2, #54	; 0x36
 8005784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005788:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800578c:	4620      	mov	r0, r4
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <scalbn+0x108>)
 8005790:	2200      	movs	r2, #0
 8005792:	e7e8      	b.n	8005766 <scalbn+0xae>
 8005794:	f3af 8000 	nop.w
 8005798:	c2f8f359 	.word	0xc2f8f359
 800579c:	01a56e1f 	.word	0x01a56e1f
 80057a0:	8800759c 	.word	0x8800759c
 80057a4:	7e37e43c 	.word	0x7e37e43c
 80057a8:	8800759c 	.word	0x8800759c
 80057ac:	fe37e43c 	.word	0xfe37e43c
 80057b0:	c2f8f359 	.word	0xc2f8f359
 80057b4:	81a56e1f 	.word	0x81a56e1f
 80057b8:	43500000 	.word	0x43500000
 80057bc:	ffff3cb0 	.word	0xffff3cb0
 80057c0:	3c900000 	.word	0x3c900000

080057c4 <_init>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr

080057d0 <_fini>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr
